import XCTest
import BitcoinCrypto
@testable import Bitcoin

/// https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#test-vectors
/// https://github.com/bitcoin/bips/blob/master/bip-0341/wallet-test-vectors.json
/// Validation test vectors used in the Bitcoin Core unit [test framework](https://github.com/bitcoin/bitcoin/blob/3820090bd619ac85ab35eff376c03136fe4a9f04/src/test/script_tests.cpp#L1718) can be found [here](https://raw.githubusercontent.com/bitcoin-core/qa-assets/main/unit_test_data/script_assets_test.json).
final class BIP341Tests: XCTestCase {

    func testScriptPubKey() {
        let scriptPubKeyTestVector = [
            (
                given: (
                    internalPubkey: Data([0xd6, 0x88, 0x9c, 0xb0, 0x81, 0x03, 0x6e, 0x0f, 0xae, 0xfa, 0x3a, 0x35, 0x15, 0x7a, 0xd7, 0x10, 0x86, 0xb1, 0x23, 0xb2, 0xb1, 0x44, 0xb6, 0x49, 0x79, 0x8b, 0x49, 0x4c, 0x30, 0x0a, 0x96, 0x1d]),
                    scriptTree: ScriptTree?.none
                ),
                intermediary: (
                    leafHashes: [Data](),
                    merkleRoot: Data?.none,
                    tweak: Data([0xb8, 0x6e, 0x7b, 0xe8, 0xf3, 0x9b, 0xab, 0x32, 0xa6, 0xf2, 0xc0, 0x44, 0x3a, 0xbb, 0xc2, 0x10, 0xf0, 0xed, 0xac, 0x0e, 0x2c, 0x53, 0xd5, 0x01, 0xb3, 0x6b, 0x64, 0x43, 0x7d, 0x9c, 0x6c, 0x70]),
                    tweakedPubkey: Data([0x53, 0xa1, 0xf6, 0xe4, 0x54, 0xdf, 0x1a, 0xa2, 0x77, 0x6a, 0x28, 0x14, 0xa7, 0x21, 0x37, 0x2d, 0x62, 0x58, 0x05, 0x0d, 0xe3, 0x30, 0xb3, 0xc6, 0xd1, 0x0e, 0xe8, 0xf4, 0xe0, 0xdd, 0xa3, 0x43])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0x53, 0xa1, 0xf6, 0xe4, 0x54, 0xdf, 0x1a, 0xa2, 0x77, 0x6a, 0x28, 0x14, 0xa7, 0x21, 0x37, 0x2d, 0x62, 0x58, 0x05, 0x0d, 0xe3, 0x30, 0xb3, 0xc6, 0xd1, 0x0e, 0xe8, 0xf4, 0xe0, 0xdd, 0xa3, 0x43]),
                    bip350Address: "bc1p2wsldez5mud2yam29q22wgfh9439spgduvct83k3pm50fcxa5dps59h4z5",
                    scriptPathControlBlocks: [Data]()
                )
            ),
            (
                given: (
                    internalPubkey: Data([0x18, 0x77, 0x91, 0xb6, 0xf7, 0x12, 0xa8, 0xea, 0x41, 0xc8, 0xec, 0xdd, 0x0e, 0xe7, 0x7f, 0xab, 0x3e, 0x85, 0x26, 0x3b, 0x37, 0xe1, 0xec, 0x18, 0xa3, 0x65, 0x19, 0x26, 0xb3, 0xa6, 0xcf, 0x27]),
                    scriptTree: .leaf(192, Data([0x20, 0xd8, 0x5a, 0x95, 0x9b, 0x02, 0x90, 0xbf, 0x19, 0xbb, 0x89, 0xed, 0x43, 0xc9, 0x16, 0xbe, 0x83, 0x54, 0x75, 0xd0, 0x13, 0xda, 0x4b, 0x36, 0x21, 0x17, 0x39, 0x3e, 0x25, 0xa4, 0x82, 0x29, 0xb8, 0xac]))
                ),
                intermediary: (
                    leafHashes: [
                        Data([0x5b, 0x75, 0xad, 0xec, 0xf5, 0x35, 0x48, 0xf3, 0xec, 0x6a, 0xd7, 0xd7, 0x83, 0x83, 0xbf, 0x84, 0xcc, 0x57, 0xb5, 0x5a, 0x31, 0x27, 0xc7, 0x2b, 0x9a, 0x24, 0x81, 0x75, 0x2d, 0xd8, 0x8b, 0x21])
                    ],
                    merkleRoot: Data([0x5b, 0x75, 0xad, 0xec, 0xf5, 0x35, 0x48, 0xf3, 0xec, 0x6a, 0xd7, 0xd7, 0x83, 0x83, 0xbf, 0x84, 0xcc, 0x57, 0xb5, 0x5a, 0x31, 0x27, 0xc7, 0x2b, 0x9a, 0x24, 0x81, 0x75, 0x2d, 0xd8, 0x8b, 0x21]),
                    tweak: Data([0xcb, 0xd8, 0x67, 0x9b, 0xa6, 0x36, 0xc1, 0x11, 0x0e, 0xa2, 0x47, 0x54, 0x2c, 0xfb, 0xd9, 0x64, 0x13, 0x1a, 0x6b, 0xe8, 0x4f, 0x87, 0x3f, 0x7f, 0x3b, 0x62, 0xa7, 0x77, 0x52, 0x8e, 0xd0, 0x01]),
                    tweakedPubkey: Data([0x14, 0x7c, 0x9c, 0x57, 0x13, 0x2f, 0x6e, 0x7e, 0xcd, 0xdb, 0xa9, 0x80, 0x0b, 0xb0, 0xc4, 0x44, 0x92, 0x51, 0xc9, 0x2a, 0x1e, 0x60, 0x37, 0x1e, 0xe7, 0x75, 0x57, 0xb6, 0x62, 0x0f, 0x3e, 0xa3])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0x14, 0x7c, 0x9c, 0x57, 0x13, 0x2f, 0x6e, 0x7e, 0xcd, 0xdb, 0xa9, 0x80, 0x0b, 0xb0, 0xc4, 0x44, 0x92, 0x51, 0xc9, 0x2a, 0x1e, 0x60, 0x37, 0x1e, 0xe7, 0x75, 0x57, 0xb6, 0x62, 0x0f, 0x3e, 0xa3]),
                    bip350Address: "bc1pz37fc4cn9ah8anwm4xqqhvxygjf9rjf2resrw8h8w4tmvcs0863sa2e586",
                    scriptPathControlBlocks: [
                        Data([0xc1, 0x18, 0x77, 0x91, 0xb6, 0xf7, 0x12, 0xa8, 0xea, 0x41, 0xc8, 0xec, 0xdd, 0x0e, 0xe7, 0x7f, 0xab, 0x3e, 0x85, 0x26, 0x3b, 0x37, 0xe1, 0xec, 0x18, 0xa3, 0x65, 0x19, 0x26, 0xb3, 0xa6, 0xcf, 0x27])
                    ]
                )
            ),
            (
                given: (
                    internalPubkey: Data([0x93, 0x47, 0x8e, 0x94, 0x88, 0xf9, 0x56, 0xdf, 0x23, 0x96, 0xbe, 0x2c, 0xe6, 0xc5, 0xcc, 0xed, 0x75, 0xf9, 0x00, 0xdf, 0xa1, 0x8e, 0x7d, 0xab, 0xd2, 0x42, 0x8a, 0xae, 0x78, 0x45, 0x18, 0x20]),
                    scriptTree:  ScriptTree?.some(.leaf(192, Data([0x20, 0xb6, 0x17, 0x29, 0x85, 0x52, 0xa7, 0x2a, 0xde, 0x07, 0x06, 0x67, 0xe8, 0x6c, 0xa6, 0x3b, 0x8f, 0x57, 0x89, 0xa9, 0xfe, 0x87, 0x31, 0xef, 0x91, 0x20, 0x2a, 0x91, 0xc9, 0xf3, 0x45, 0x90, 0x07, 0xac])))
                ),
                intermediary: (
                    leafHashes: [
                        Data([0xc5, 0x25, 0x71, 0x4a, 0x7f, 0x49, 0xc2, 0x8a, 0xed, 0xbb, 0xba, 0x78, 0xc0, 0x05, 0x93, 0x1a, 0x81, 0xc2, 0x34, 0xb2, 0xf6, 0xc9, 0x9a, 0x73, 0xe4, 0xd0, 0x60, 0x82, 0xad, 0xc8, 0xbf, 0x2b])
                    ],
                    merkleRoot: Data([0xc5, 0x25, 0x71, 0x4a, 0x7f, 0x49, 0xc2, 0x8a, 0xed, 0xbb, 0xba, 0x78, 0xc0, 0x05, 0x93, 0x1a, 0x81, 0xc2, 0x34, 0xb2, 0xf6, 0xc9, 0x9a, 0x73, 0xe4, 0xd0, 0x60, 0x82, 0xad, 0xc8, 0xbf, 0x2b]),
                    tweak: Data([0x6a, 0xf9, 0xe2, 0x8d, 0xbf, 0x9d, 0x6a, 0xaf, 0x02, 0x76, 0x96, 0xe2, 0x59, 0x8a, 0x5b, 0x3d, 0x05, 0x6f, 0x5f, 0xd2, 0x35, 0x5a, 0x7f, 0xd5, 0xa3, 0x7a, 0x0e, 0x50, 0x08, 0x13, 0x2d, 0x30]),
                    tweakedPubkey: Data([0xe4, 0xd8, 0x10, 0xfd, 0x50, 0x58, 0x62, 0x74, 0xfa, 0xce, 0x62, 0xb8, 0xa8, 0x07, 0xeb, 0x97, 0x19, 0xce, 0xf4, 0x9c, 0x04, 0x17, 0x7c, 0xc6, 0xb7, 0x6a, 0x9a, 0x42, 0x51, 0xd5, 0x45, 0x0e])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0xe4, 0xd8, 0x10, 0xfd, 0x50, 0x58, 0x62, 0x74, 0xfa, 0xce, 0x62, 0xb8, 0xa8, 0x07, 0xeb, 0x97, 0x19, 0xce, 0xf4, 0x9c, 0x04, 0x17, 0x7c, 0xc6, 0xb7, 0x6a, 0x9a, 0x42, 0x51, 0xd5, 0x45, 0x0e]),
                    bip350Address: "bc1punvppl2stp38f7kwv2u2spltjuvuaayuqsthe34hd2dyy5w4g58qqfuag5",
                    scriptPathControlBlocks: [
                        Data([0xc0, 0x93, 0x47, 0x8e, 0x94, 0x88, 0xf9, 0x56, 0xdf, 0x23, 0x96, 0xbe, 0x2c, 0xe6, 0xc5, 0xcc, 0xed, 0x75, 0xf9, 0x00, 0xdf, 0xa1, 0x8e, 0x7d, 0xab, 0xd2, 0x42, 0x8a, 0xae, 0x78, 0x45, 0x18, 0x20])
                    ]
                )
            ),
            (
                given: (
                    internalPubkey: Data([0xee, 0x4f, 0xe0, 0x85, 0x98, 0x34, 0x62, 0xa1, 0x84, 0x01, 0x5d, 0x1f, 0x78, 0x2d, 0x6a, 0x5f, 0x8b, 0x9c, 0x2b, 0x60, 0x13, 0x0a, 0xff, 0x05, 0x0c, 0xe2, 0x21, 0xec, 0xf3, 0x78, 0x65, 0x92]),
                    scriptTree: ScriptTree?.some(.branch(
                        .leaf(192, Data([0x20, 0x38, 0x76, 0x71, 0x35, 0x3e, 0x27, 0x32, 0x64, 0xc4, 0x95, 0x65, 0x6e, 0x27, 0xe3, 0x9b, 0xa8, 0x99, 0xea, 0x8f, 0xee, 0x3b, 0xb6, 0x9f, 0xb2, 0xa6, 0x80, 0xe2, 0x20, 0x93, 0x44, 0x7d, 0x48, 0xac])),
                        .leaf(250, Data([0x06, 0x42, 0x49, 0x50, 0x33, 0x34, 0x31]))
                    ))
                ),
                intermediary: (
                    leafHashes: [
                        Data([0x8a, 0xd6, 0x9e, 0xc7, 0xcf, 0x41, 0xc2, 0xa4, 0x00, 0x1f, 0xd1, 0xf7, 0x38, 0xbf, 0x1e, 0x50, 0x5c, 0xe2, 0x27, 0x7a, 0xcd, 0xca, 0xa6, 0x3f, 0xe4, 0x76, 0x51, 0x92, 0x49, 0x7f, 0x47, 0xa7]),
                        Data([0xf2, 0x24, 0xa9, 0x23, 0xcd, 0x00, 0x21, 0xab, 0x20, 0x2a, 0xb1, 0x39, 0xcc, 0x56, 0x80, 0x2d, 0xdb, 0x92, 0xdc, 0xfc, 0x17, 0x2b, 0x92, 0x12, 0x26, 0x1a, 0x53, 0x9d, 0xf7, 0x9a, 0x11, 0x2a])
                    ],
                    merkleRoot: Data([0x6c, 0x2d, 0xc1, 0x06, 0xab, 0x81, 0x6b, 0x73, 0xf9, 0xd0, 0x7e, 0x3c, 0xd1, 0xef, 0x2c, 0x8c, 0x12, 0x56, 0xf5, 0x19, 0x74, 0x8e, 0x08, 0x13, 0xe4, 0xed, 0xd2, 0x40, 0x5d, 0x27, 0x7b, 0xef]),
                    tweak: Data([0x9e, 0x05, 0x17, 0xed, 0xc8, 0x25, 0x9b, 0xb3, 0x35, 0x92, 0x55, 0x40, 0x0b, 0x23, 0xca, 0x95, 0x07, 0xf2, 0xa9, 0x1c, 0xd1, 0xe4, 0x25, 0x0b, 0xa0, 0x68, 0xb4, 0xea, 0xfc, 0xeb, 0xa4, 0xa9]),
                    tweakedPubkey: Data([0x71, 0x24, 0x47, 0x20, 0x6d, 0x7a, 0x52, 0x38, 0xac, 0xc7, 0xff, 0x53, 0xfb, 0xe9, 0x4a, 0x3b, 0x64, 0x53, 0x9a, 0xd2, 0x91, 0xc7, 0xcd, 0xbc, 0x49, 0x0b, 0x75, 0x77, 0xe4, 0xb1, 0x7d, 0xf5])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0x71, 0x24, 0x47, 0x20, 0x6d, 0x7a, 0x52, 0x38, 0xac, 0xc7, 0xff, 0x53, 0xfb, 0xe9, 0x4a, 0x3b, 0x64, 0x53, 0x9a, 0xd2, 0x91, 0xc7, 0xcd, 0xbc, 0x49, 0x0b, 0x75, 0x77, 0xe4, 0xb1, 0x7d, 0xf5]),
                    bip350Address: "bc1pwyjywgrd0ffr3tx8laflh6228dj98xkjj8rum0zfpd6h0e930h6saqxrrm",
                    scriptPathControlBlocks: [
                        Data([0xc0, 0xee, 0x4f, 0xe0, 0x85, 0x98, 0x34, 0x62, 0xa1, 0x84, 0x01, 0x5d, 0x1f, 0x78, 0x2d, 0x6a, 0x5f, 0x8b, 0x9c, 0x2b, 0x60, 0x13, 0x0a, 0xff, 0x05, 0x0c, 0xe2, 0x21, 0xec, 0xf3, 0x78, 0x65, 0x92, 0xf2, 0x24, 0xa9, 0x23, 0xcd, 0x00, 0x21, 0xab, 0x20, 0x2a, 0xb1, 0x39, 0xcc, 0x56, 0x80, 0x2d, 0xdb, 0x92, 0xdc, 0xfc, 0x17, 0x2b, 0x92, 0x12, 0x26, 0x1a, 0x53, 0x9d, 0xf7, 0x9a, 0x11, 0x2a]),
                        Data([0xfa, 0xee, 0x4f, 0xe0, 0x85, 0x98, 0x34, 0x62, 0xa1, 0x84, 0x01, 0x5d, 0x1f, 0x78, 0x2d, 0x6a, 0x5f, 0x8b, 0x9c, 0x2b, 0x60, 0x13, 0x0a, 0xff, 0x05, 0x0c, 0xe2, 0x21, 0xec, 0xf3, 0x78, 0x65, 0x92, 0x8a, 0xd6, 0x9e, 0xc7, 0xcf, 0x41, 0xc2, 0xa4, 0x00, 0x1f, 0xd1, 0xf7, 0x38, 0xbf, 0x1e, 0x50, 0x5c, 0xe2, 0x27, 0x7a, 0xcd, 0xca, 0xa6, 0x3f, 0xe4, 0x76, 0x51, 0x92, 0x49, 0x7f, 0x47, 0xa7])
                    ]
                )
            ),
            (
                given: (
                    internalPubkey: Data([0xf9, 0xf4, 0x00, 0x80, 0x3e, 0x68, 0x37, 0x27, 0xb1, 0x4f, 0x46, 0x38, 0x36, 0xe1, 0xe7, 0x8e, 0x1c, 0x64, 0x41, 0x76, 0x38, 0xaa, 0x06, 0x69, 0x19, 0x29, 0x1a, 0x22, 0x5f, 0x0e, 0x8d, 0xd8]),
                    scriptTree: ScriptTree?.some(.branch(
                        .leaf(192, Data([0x20, 0x44, 0xb1, 0x78, 0xd6, 0x4c, 0x32, 0xc4, 0xa0, 0x5c, 0xc4, 0xf4, 0xd1, 0x40, 0x72, 0x68, 0xf7, 0x64, 0xc9, 0x40, 0xd2, 0x0c, 0xe9, 0x7a, 0xbf, 0xd4, 0x4d, 0xb5, 0xc3, 0x59, 0x2b, 0x72, 0xfd, 0xac])),
                        .leaf(192, Data([0x07, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74]))
                    ))
                ),
                intermediary: (
                    leafHashes: [
                        Data([0x64, 0x51, 0x2f, 0xec, 0xdb, 0x5a, 0xfa, 0x04, 0xf9, 0x88, 0x39, 0xb5, 0x0e, 0x6f, 0x0c, 0xb7, 0xb1, 0xe5, 0x39, 0xbf, 0x6f, 0x20, 0x5f, 0x67, 0x93, 0x40, 0x83, 0xcd, 0xcc, 0x3c, 0x8d, 0x89]),
                        Data([0x2c, 0xb2, 0xb9, 0x0d, 0xaa, 0x54, 0x3b, 0x54, 0x41, 0x61, 0x53, 0x0c, 0x92, 0x5f, 0x28, 0x5b, 0x06, 0x19, 0x69, 0x40, 0xd6, 0x08, 0x5c, 0xa9, 0x47, 0x4d, 0x41, 0xdc, 0x38, 0x22, 0xc5, 0xcb])
                    ],
                    merkleRoot: Data([0xab, 0x17, 0x94, 0x31, 0xc2, 0x8d, 0x3b, 0x68, 0xfb, 0x79, 0x89, 0x57, 0xfa, 0xf5, 0x49, 0x7d, 0x69, 0xc8, 0x83, 0xc6, 0xfb, 0x1e, 0x1c, 0xd9, 0xf8, 0x14, 0x83, 0xd8, 0x7b, 0xac, 0x90, 0xcc]),
                    tweak: Data([0x63, 0x9f, 0x02, 0x81, 0xb7, 0xac, 0x49, 0xe7, 0x42, 0xcd, 0x25, 0xb7, 0xf1, 0x88, 0x65, 0x76, 0x26, 0xda, 0x1a, 0xd1, 0x69, 0x20, 0x90, 0x78, 0xe2, 0x76, 0x1c, 0xef, 0xd9, 0x1f, 0xd6, 0x5e]),
                    tweakedPubkey: Data([0x77, 0xe3, 0x0a, 0x55, 0x22, 0xdd, 0x9f, 0x89, 0x4c, 0x3f, 0x8b, 0x8b, 0xd4, 0xc4, 0xb2, 0xcf, 0x82, 0xca, 0x7d, 0xa8, 0xa3, 0xea, 0x6a, 0x23, 0x96, 0x55, 0xc3, 0x9c, 0x05, 0x0a, 0xb2, 0x20])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0x77, 0xe3, 0x0a, 0x55, 0x22, 0xdd, 0x9f, 0x89, 0x4c, 0x3f, 0x8b, 0x8b, 0xd4, 0xc4, 0xb2, 0xcf, 0x82, 0xca, 0x7d, 0xa8, 0xa3, 0xea, 0x6a, 0x23, 0x96, 0x55, 0xc3, 0x9c, 0x05, 0x0a, 0xb2, 0x20]),
                    bip350Address: "bc1pwl3s54fzmk0cjnpl3w9af39je7pv5ldg504x5guk2hpecpg2kgsqaqstjq",
                    scriptPathControlBlocks: [
                        Data([0xc1, 0xf9, 0xf4, 0x00, 0x80, 0x3e, 0x68, 0x37, 0x27, 0xb1, 0x4f, 0x46, 0x38, 0x36, 0xe1, 0xe7, 0x8e, 0x1c, 0x64, 0x41, 0x76, 0x38, 0xaa, 0x06, 0x69, 0x19, 0x29, 0x1a, 0x22, 0x5f, 0x0e, 0x8d, 0xd8, 0x2c, 0xb2, 0xb9, 0x0d, 0xaa, 0x54, 0x3b, 0x54, 0x41, 0x61, 0x53, 0x0c, 0x92, 0x5f, 0x28, 0x5b, 0x06, 0x19, 0x69, 0x40, 0xd6, 0x08, 0x5c, 0xa9, 0x47, 0x4d, 0x41, 0xdc, 0x38, 0x22, 0xc5, 0xcb]),
                        Data([0xc1, 0xf9, 0xf4, 0x00, 0x80, 0x3e, 0x68, 0x37, 0x27, 0xb1, 0x4f, 0x46, 0x38, 0x36, 0xe1, 0xe7, 0x8e, 0x1c, 0x64, 0x41, 0x76, 0x38, 0xaa, 0x06, 0x69, 0x19, 0x29, 0x1a, 0x22, 0x5f, 0x0e, 0x8d, 0xd8, 0x64, 0x51, 0x2f, 0xec, 0xdb, 0x5a, 0xfa, 0x04, 0xf9, 0x88, 0x39, 0xb5, 0x0e, 0x6f, 0x0c, 0xb7, 0xb1, 0xe5, 0x39, 0xbf, 0x6f, 0x20, 0x5f, 0x67, 0x93, 0x40, 0x83, 0xcd, 0xcc, 0x3c, 0x8d, 0x89])
                    ]
                )
            ),
            (
                given: (
                    internalPubkey: Data([0xe0, 0xdf, 0xe2, 0x30, 0x0b, 0x0d, 0xd7, 0x46, 0xa3, 0xf8, 0x67, 0x4d, 0xfd, 0x45, 0x25, 0x62, 0x36, 0x39, 0x04, 0x25, 0x69, 0xd8, 0x29, 0xc7, 0xf0, 0xee, 0xd9, 0x60, 0x2d, 0x26, 0x3e, 0x6f]),
                    scriptTree: ScriptTree?.some(.branch(
                        .leaf(192, Data([0x20, 0x72, 0xea, 0x6a, 0xdc, 0xf1, 0xd3, 0x71, 0xde, 0xa8, 0xfb, 0xa1, 0x03, 0x5a, 0x09, 0xf3, 0xd2, 0x4e, 0xd5, 0xa0, 0x59, 0x79, 0x9b, 0xae, 0x11, 0x40, 0x84, 0x13, 0x0e, 0xe5, 0x89, 0x8e, 0x69, 0xac])),
                        .branch(
                            .leaf(192, Data([0x20, 0x23, 0x52, 0xd1, 0x37, 0xf2, 0xf3, 0xab, 0x38, 0xd1, 0xea, 0xa9, 0x76, 0x75, 0x88, 0x73, 0x37, 0x7f, 0xa5, 0xeb, 0xb8, 0x17, 0x37, 0x2c, 0x71, 0xe2, 0xc5, 0x42, 0x31, 0x3d, 0x4a, 0xbd, 0xa8, 0xac])),
                            .leaf(192, Data([0x20, 0x73, 0x37, 0xc0, 0xdd, 0x42, 0x53, 0xcb, 0x86, 0xf2, 0xc4, 0x3a, 0x23, 0x51, 0xaa, 0xdd, 0x82, 0xcc, 0xcb, 0x12, 0xa1, 0x72, 0xcd, 0x12, 0x04, 0x52, 0xb9, 0xbb, 0x83, 0x24, 0xf2, 0x18, 0x6a, 0xac]))
                        )
                    ))
                ),
                intermediary: (
                    leafHashes: [
                        Data([0x26, 0x45, 0xa0, 0x2e, 0x0a, 0xac, 0x1f, 0xe6, 0x9d, 0x69, 0x75, 0x57, 0x33, 0xa9, 0xb7, 0x62, 0x1b, 0x69, 0x4b, 0xb5, 0xb5, 0xcd, 0xe2, 0xbb, 0xfc, 0x94, 0x06, 0x6e, 0xd6, 0x2b, 0x98, 0x17]),
                        Data([0xba, 0x98, 0x2a, 0x91, 0xd4, 0xfc, 0x55, 0x21, 0x63, 0xcb, 0x1c, 0x0d, 0xa0, 0x36, 0x76, 0x10, 0x2d, 0x5b, 0x7a, 0x01, 0x43, 0x04, 0xc0, 0x1f, 0x0c, 0x77, 0xb2, 0xb8, 0xe8, 0x88, 0xde, 0x1c]),
                        Data([0x9e, 0x31, 0x40, 0x7b, 0xff, 0xa1, 0x5f, 0xef, 0xbf, 0x50, 0x90, 0xb1, 0x49, 0xd5, 0x39, 0x59, 0xec, 0xdf, 0x3f, 0x62, 0xb1, 0x24, 0x67, 0x80, 0x23, 0x8c, 0x24, 0x50, 0x1d, 0x5c, 0xea, 0xf6])
                    ],
                    merkleRoot: Data([0xcc, 0xbd, 0x66, 0xc6, 0xf7, 0xe8, 0xfd, 0xab, 0x47, 0xb3, 0xa4, 0x86, 0xf5, 0x9d, 0x28, 0x26, 0x2b, 0xe8, 0x57, 0xf3, 0x0d, 0x47, 0x73, 0xf2, 0xd5, 0xea, 0x47, 0xf7, 0x76, 0x1c, 0xe0, 0xe2]),
                    tweak: Data([0xb5, 0x7b, 0xfa, 0x18, 0x3d, 0x28, 0xee, 0xb6, 0xad, 0x68, 0x8d, 0xda, 0xab, 0xb2, 0x65, 0xb4, 0xa4, 0x1f, 0xbf, 0x68, 0xe5, 0xfe, 0xd2, 0xc7, 0x2c, 0x74, 0xde, 0x70, 0xd5, 0xa7, 0x86, 0xf4]),
                    tweakedPubkey: Data([0x91, 0xb6, 0x4d, 0x53, 0x24, 0x72, 0x3a, 0x98, 0x51, 0x70, 0xe4, 0xdc, 0x5a, 0x0f, 0x84, 0xc0, 0x41, 0x80, 0x4f, 0x2c, 0xd1, 0x26, 0x60, 0xfa, 0x5d, 0xec, 0x09, 0xfc, 0x21, 0x78, 0x36, 0x05])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0x91, 0xb6, 0x4d, 0x53, 0x24, 0x72, 0x3a, 0x98, 0x51, 0x70, 0xe4, 0xdc, 0x5a, 0x0f, 0x84, 0xc0, 0x41, 0x80, 0x4f, 0x2c, 0xd1, 0x26, 0x60, 0xfa, 0x5d, 0xec, 0x09, 0xfc, 0x21, 0x78, 0x36, 0x05]),
                    bip350Address: "bc1pjxmy65eywgafs5tsunw95ruycpqcqnev6ynxp7jaasylcgtcxczs6n332e",
                    scriptPathControlBlocks: [
                        Data([0xc0, 0xe0, 0xdf, 0xe2, 0x30, 0x0b, 0x0d, 0xd7, 0x46, 0xa3, 0xf8, 0x67, 0x4d, 0xfd, 0x45, 0x25, 0x62, 0x36, 0x39, 0x04, 0x25, 0x69, 0xd8, 0x29, 0xc7, 0xf0, 0xee, 0xd9, 0x60, 0x2d, 0x26, 0x3e, 0x6f, 0xff, 0xe5, 0x78, 0xe9, 0xea, 0x76, 0x90, 0x27, 0xe4, 0xf5, 0xa3, 0xde, 0x40, 0x73, 0x2f, 0x75, 0xa8, 0x8a, 0x63, 0x53, 0xa0, 0x9d, 0x76, 0x7d, 0xde, 0xb6, 0x6a, 0xcc, 0xef, 0x85, 0xe5, 0x53]),
                        Data([0xc0, 0xe0, 0xdf, 0xe2, 0x30, 0x0b, 0x0d, 0xd7, 0x46, 0xa3, 0xf8, 0x67, 0x4d, 0xfd, 0x45, 0x25, 0x62, 0x36, 0x39, 0x04, 0x25, 0x69, 0xd8, 0x29, 0xc7, 0xf0, 0xee, 0xd9, 0x60, 0x2d, 0x26, 0x3e, 0x6f, 0x9e, 0x31, 0x40, 0x7b, 0xff, 0xa1, 0x5f, 0xef, 0xbf, 0x50, 0x90, 0xb1, 0x49, 0xd5, 0x39, 0x59, 0xec, 0xdf, 0x3f, 0x62, 0xb1, 0x24, 0x67, 0x80, 0x23, 0x8c, 0x24, 0x50, 0x1d, 0x5c, 0xea, 0xf6, 0x26, 0x45, 0xa0, 0x2e, 0x0a, 0xac, 0x1f, 0xe6, 0x9d, 0x69, 0x75, 0x57, 0x33, 0xa9, 0xb7, 0x62, 0x1b, 0x69, 0x4b, 0xb5, 0xb5, 0xcd, 0xe2, 0xbb, 0xfc, 0x94, 0x06, 0x6e, 0xd6, 0x2b, 0x98, 0x17]),
                        Data([0xc0, 0xe0, 0xdf, 0xe2, 0x30, 0x0b, 0x0d, 0xd7, 0x46, 0xa3, 0xf8, 0x67, 0x4d, 0xfd, 0x45, 0x25, 0x62, 0x36, 0x39, 0x04, 0x25, 0x69, 0xd8, 0x29, 0xc7, 0xf0, 0xee, 0xd9, 0x60, 0x2d, 0x26, 0x3e, 0x6f, 0xba, 0x98, 0x2a, 0x91, 0xd4, 0xfc, 0x55, 0x21, 0x63, 0xcb, 0x1c, 0x0d, 0xa0, 0x36, 0x76, 0x10, 0x2d, 0x5b, 0x7a, 0x01, 0x43, 0x04, 0xc0, 0x1f, 0x0c, 0x77, 0xb2, 0xb8, 0xe8, 0x88, 0xde, 0x1c, 0x26, 0x45, 0xa0, 0x2e, 0x0a, 0xac, 0x1f, 0xe6, 0x9d, 0x69, 0x75, 0x57, 0x33, 0xa9, 0xb7, 0x62, 0x1b, 0x69, 0x4b, 0xb5, 0xb5, 0xcd, 0xe2, 0xbb, 0xfc, 0x94, 0x06, 0x6e, 0xd6, 0x2b, 0x98, 0x17])
                    ]
                )
            ),
            (
                given: (
                    internalPubkey: Data([0x55, 0xad, 0xf4, 0xe8, 0x96, 0x7f, 0xbd, 0x2e, 0x29, 0xf2, 0x0a, 0xc8, 0x96, 0xe6, 0x0c, 0x3b, 0x0f, 0x1d, 0x5b, 0x0e, 0xfa, 0x9d, 0x34, 0x94, 0x1b, 0x59, 0x58, 0xc7, 0xb0, 0xa0, 0x31, 0x2d]),
                    scriptTree: ScriptTree?.some(.branch(
                        .leaf(192, Data([0x20, 0x71, 0x98, 0x15, 0x21, 0xad, 0x9f, 0xc9, 0x03, 0x66, 0x87, 0x36, 0x41, 0x18, 0xfb, 0x6c, 0xcd, 0x20, 0x35, 0xb9, 0x6a, 0x42, 0x3c, 0x59, 0xc5, 0x43, 0x0e, 0x98, 0x31, 0x0a, 0x11, 0xab, 0xe2, 0xac])),
                        .branch(
                            .leaf(192, Data([0x20, 0xd5, 0x09, 0x4d, 0x2d, 0xbe, 0x9b, 0x76, 0xe2, 0xc2, 0x45, 0xa2, 0xb8, 0x9b, 0x60, 0x06, 0x88, 0x89, 0x52, 0xe2, 0xfa, 0xa6, 0xa1, 0x49, 0xae, 0x31, 0x8d, 0x69, 0xe5, 0x20, 0x61, 0x77, 0x48, 0xac])),
                            .leaf(192, Data([0x20, 0xc4, 0x40, 0xb4, 0x62, 0xad, 0x48, 0xc7, 0xa7, 0x7f, 0x94, 0xcd, 0x45, 0x32, 0xd8, 0xf2, 0x11, 0x9d, 0xce, 0xbb, 0xd7, 0xc9, 0x76, 0x45, 0x57, 0xe6, 0x27, 0x26, 0x41, 0x9b, 0x08, 0xad, 0x4c, 0xac]))
                        )
                    ))
                ),
                intermediary: (
                    leafHashes: [
                        Data([0xf1, 0x54, 0xe8, 0xe8, 0xe1, 0x7c, 0x31, 0xd3, 0x46, 0x2d, 0x71, 0x32, 0x58, 0x9e, 0xd2, 0x93, 0x53, 0xc6, 0xfa, 0xfd, 0xb8, 0x84, 0xc5, 0xa6, 0xe0, 0x4e, 0xa9, 0x38, 0x83, 0x4f, 0x0d, 0x9d]),
                        Data([0x73, 0x7e, 0xd1, 0xfe, 0x30, 0xbc, 0x42, 0xb8, 0x02, 0x2d, 0x71, 0x7b, 0x44, 0xf0, 0xd9, 0x35, 0x16, 0x61, 0x7a, 0xf6, 0x4a, 0x64, 0x75, 0x3b, 0x7a, 0x06, 0xbf, 0x16, 0xb2, 0x6c, 0xd7, 0x11]),
                        Data([0xd7, 0x48, 0x50, 0x25, 0xfc, 0xeb, 0x78, 0xb9, 0xed, 0x66, 0x7d, 0xb3, 0x6e, 0xd8, 0xb8, 0xdc, 0x7b, 0x1f, 0x0b, 0x30, 0x7a, 0xc1, 0x67, 0xfa, 0x51, 0x6f, 0xe4, 0x35, 0x2b, 0x9f, 0x4e, 0xf7])
                    ],
                    merkleRoot: Data([0x2f, 0x6b, 0x2c, 0x53, 0x97, 0xb6, 0xd6, 0x8c, 0xa1, 0x8e, 0x09, 0xa3, 0xf0, 0x51, 0x61, 0x66, 0x8f, 0xfe, 0x93, 0xa9, 0x88, 0x58, 0x2d, 0x55, 0xc6, 0xf0, 0x7b, 0xd5, 0xb3, 0x32, 0x9d, 0xef]),
                    tweak: Data([0x65, 0x79, 0x13, 0x8e, 0x79, 0x76, 0xdc, 0x13, 0xb6, 0xa9, 0x2f, 0x7b, 0xfd, 0x5a, 0x2f, 0xc7, 0x68, 0x4f, 0x5e, 0xa4, 0x24, 0x19, 0xd4, 0x33, 0x68, 0x30, 0x14, 0x70, 0xf3, 0xb7, 0x4e, 0xd9]),
                    tweakedPubkey: Data([0x75, 0x16, 0x9f, 0x40, 0x01, 0xaa, 0x68, 0xf1, 0x5b, 0xbe, 0xd2, 0x8b, 0x21, 0x8d, 0xf1, 0xd0, 0xa6, 0x2c, 0xbb, 0xcf, 0x11, 0x88, 0xc6, 0x66, 0x51, 0x10, 0xc2, 0x93, 0xc9, 0x07, 0xb8, 0x31])
                ),
                expected: (
                    scriptPubKey: Data([0x51, 0x20, 0x75, 0x16, 0x9f, 0x40, 0x01, 0xaa, 0x68, 0xf1, 0x5b, 0xbe, 0xd2, 0x8b, 0x21, 0x8d, 0xf1, 0xd0, 0xa6, 0x2c, 0xbb, 0xcf, 0x11, 0x88, 0xc6, 0x66, 0x51, 0x10, 0xc2, 0x93, 0xc9, 0x07, 0xb8, 0x31]),
                    bip350Address: "bc1pw5tf7sqp4f50zka7629jrr036znzew70zxyvvej3zrpf8jg8hqcssyuewe",
                    scriptPathControlBlocks: [
                        Data([0xc1, 0x55, 0xad, 0xf4, 0xe8, 0x96, 0x7f, 0xbd, 0x2e, 0x29, 0xf2, 0x0a, 0xc8, 0x96, 0xe6, 0x0c, 0x3b, 0x0f, 0x1d, 0x5b, 0x0e, 0xfa, 0x9d, 0x34, 0x94, 0x1b, 0x59, 0x58, 0xc7, 0xb0, 0xa0, 0x31, 0x2d, 0x3c, 0xd3, 0x69, 0xa5, 0x28, 0xb3, 0x26, 0xbc, 0x9d, 0x21, 0x33, 0xcb, 0xd2, 0xac, 0x21, 0x45, 0x1a, 0xcb, 0x31, 0x68, 0x1a, 0x41, 0x04, 0x34, 0x67, 0x2c, 0x8e, 0x34, 0xfe, 0x75, 0x7e, 0x91]),
                        Data([0xc1, 0x55, 0xad, 0xf4, 0xe8, 0x96, 0x7f, 0xbd, 0x2e, 0x29, 0xf2, 0x0a, 0xc8, 0x96, 0xe6, 0x0c, 0x3b, 0x0f, 0x1d, 0x5b, 0x0e, 0xfa, 0x9d, 0x34, 0x94, 0x1b, 0x59, 0x58, 0xc7, 0xb0, 0xa0, 0x31, 0x2d, 0xd7, 0x48, 0x50, 0x25, 0xfc, 0xeb, 0x78, 0xb9, 0xed, 0x66, 0x7d, 0xb3, 0x6e, 0xd8, 0xb8, 0xdc, 0x7b, 0x1f, 0x0b, 0x30, 0x7a, 0xc1, 0x67, 0xfa, 0x51, 0x6f, 0xe4, 0x35, 0x2b, 0x9f, 0x4e, 0xf7, 0xf1, 0x54, 0xe8, 0xe8, 0xe1, 0x7c, 0x31, 0xd3, 0x46, 0x2d, 0x71, 0x32, 0x58, 0x9e, 0xd2, 0x93, 0x53, 0xc6, 0xfa, 0xfd, 0xb8, 0x84, 0xc5, 0xa6, 0xe0, 0x4e, 0xa9, 0x38, 0x83, 0x4f, 0x0d, 0x9d]),
                        Data([0xc1, 0x55, 0xad, 0xf4, 0xe8, 0x96, 0x7f, 0xbd, 0x2e, 0x29, 0xf2, 0x0a, 0xc8, 0x96, 0xe6, 0x0c, 0x3b, 0x0f, 0x1d, 0x5b, 0x0e, 0xfa, 0x9d, 0x34, 0x94, 0x1b, 0x59, 0x58, 0xc7, 0xb0, 0xa0, 0x31, 0x2d, 0x73, 0x7e, 0xd1, 0xfe, 0x30, 0xbc, 0x42, 0xb8, 0x02, 0x2d, 0x71, 0x7b, 0x44, 0xf0, 0xd9, 0x35, 0x16, 0x61, 0x7a, 0xf6, 0x4a, 0x64, 0x75, 0x3b, 0x7a, 0x06, 0xbf, 0x16, 0xb2, 0x6c, 0xd7, 0x11, 0xf1, 0x54, 0xe8, 0xe8, 0xe1, 0x7c, 0x31, 0xd3, 0x46, 0x2d, 0x71, 0x32, 0x58, 0x9e, 0xd2, 0x93, 0x53, 0xc6, 0xfa, 0xfd, 0xb8, 0x84, 0xc5, 0xa6, 0xe0, 0x4e, 0xa9, 0x38, 0x83, 0x4f, 0x0d, 0x9d])
                    ]
                )
            )
        ]

        for i in scriptPubKeyTestVector.indices {
            let testCase = scriptPubKeyTestVector[i]
            let merkleRoot: Data?
            let leafHashes: [Data]
            let controlBlocks: [Data]
            if let scriptTree = testCase.given.scriptTree {
                let treeInfo: [(ScriptTree, Data)]
                (treeInfo, merkleRoot) = scriptTree.calcMerkleRoot()
                guard let merkleRoot else {
                    fatalError()
                }
                leafHashes = treeInfo.map {
                    let (leaf, _) = $0
                    return leaf.leafHash
                }

                controlBlocks = treeInfo.map { leafInfo in
                    let (scriptLeaf, path) = leafInfo
                    guard case .leaf(let leafVersion, _) = scriptLeaf else {
                        preconditionFailure()
                    }
                    return computeControlBlock(internalKey: testCase.given.internalPubkey, merkleRoot: merkleRoot, leafVersion: leafVersion, path: path)
                }
            } else {
                merkleRoot = .none
                leafHashes = []
                controlBlocks = []
            }
            let tweak = computeTapTweakHash(internalKey: testCase.given.internalPubkey, merkleRoot: merkleRoot)
            let (tweakedPubkey, _) = createTapTweak(internalKey: testCase.given.internalPubkey, merkleRoot: merkleRoot)
            let scriptPubKey = BitcoinScript([.constant(1), .pushBytes(tweakedPubkey)]).data

            // BIP350
            guard let bip350Address = try? SegwitAddrCoder.encode(hrp: WalletNetwork.main.bech32HRP, version: 1, program: tweakedPubkey) else {
                XCTFail(); return
            }

            XCTAssertEqual(leafHashes, testCase.intermediary.leafHashes)
            XCTAssertEqual(merkleRoot, testCase.intermediary.merkleRoot)
            XCTAssertEqual(tweak, testCase.intermediary.tweak)
            XCTAssertEqual(tweakedPubkey, testCase.intermediary.tweakedPubkey)
            XCTAssertEqual(scriptPubKey, testCase.expected.scriptPubKey)
            XCTAssertEqual(bip350Address, testCase.expected.bip350Address)
            XCTAssertEqual(controlBlocks, testCase.expected.scriptPathControlBlocks)

        }
    }

    func testKeyPathSpending() {

        // NOTE: Output script does not actually parse fully.
        let tx = BitcoinTransaction(.init([0x02, 0x00, 0x00, 0x00, 0x09, 0x7d, 0xe2, 0x0c, 0xbf, 0xf6, 0x86, 0xda, 0x83, 0xa5, 0x49, 0x81, 0xd2, 0xb9, 0xba, 0xb3, 0x58, 0x6f, 0x4c, 0xa7, 0xe4, 0x8f, 0x57, 0xf5, 0xb5, 0x59, 0x63, 0x11, 0x5f, 0x3b, 0x33, 0x4e, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xb7, 0xca, 0xb5, 0x7b, 0x13, 0x93, 0xac, 0xe2, 0xd0, 0x64, 0xf4, 0xd4, 0xa2, 0xcb, 0x8a, 0xf6, 0xde, 0xf6, 0x12, 0x73, 0xe1, 0x27, 0x51, 0x7d, 0x44, 0x75, 0x9b, 0x6d, 0xaf, 0xdd, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe1, 0xf5, 0x83, 0x38, 0x43, 0x33, 0x68, 0x92, 0x28, 0xc5, 0xd2, 0x8e, 0xac, 0x13, 0x36, 0x6b, 0xe0, 0x82, 0xdc, 0x57, 0x44, 0x17, 0x60, 0xd9, 0x57, 0x27, 0x54, 0x19, 0xa4, 0x18, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x68, 0x91, 0x80, 0xaa, 0x63, 0xb3, 0x0c, 0xb1, 0x62, 0xa7, 0x3c, 0x6d, 0x2a, 0x38, 0xb7, 0xee, 0xda, 0x2a, 0x83, 0xec, 0xe7, 0x43, 0x10, 0xfd, 0xa0, 0x84, 0x3a, 0xd6, 0x04, 0x85, 0x3b, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xaa, 0x52, 0x02, 0xbd, 0xf6, 0xd8, 0xcc, 0xd2, 0xee, 0x0f, 0x02, 0x02, 0xaf, 0xbb, 0xb7, 0x46, 0x1d, 0x92, 0x64, 0xa2, 0x5e, 0x5b, 0xfd, 0x3c, 0x5a, 0x52, 0xee, 0x12, 0x39, 0xe0, 0xba, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x95, 0x61, 0x49, 0xbd, 0xc6, 0x6f, 0xaa, 0x96, 0x8e, 0xb2, 0xbe, 0x2d, 0x2f, 0xaa, 0x29, 0x71, 0x8a, 0xcb, 0xfe, 0x39, 0x41, 0x21, 0x58, 0x93, 0xa2, 0xa3, 0x44, 0x6d, 0x32, 0xac, 0xd0, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x64, 0xb9, 0x77, 0x3b, 0x88, 0xc0, 0x9c, 0x32, 0xcb, 0x70, 0xa2, 0xa3, 0xe4, 0xda, 0x0c, 0xed, 0x63, 0xb7, 0xba, 0x3b, 0x22, 0xf8, 0x48, 0x53, 0x1b, 0xbb, 0x1d, 0x5d, 0x5f, 0x4c, 0x94, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x6b, 0x8e, 0x6c, 0x9d, 0xe6, 0x76, 0x19, 0xe6, 0xa3, 0x92, 0x4a, 0xe2, 0x56, 0x96, 0xbb, 0x7b, 0x69, 0x4b, 0xb6, 0x77, 0xa6, 0x32, 0xa7, 0x4e, 0xf7, 0xea, 0xdf, 0xd4, 0xea, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xa7, 0x78, 0xeb, 0x6a, 0x26, 0x3d, 0xc0, 0x90, 0x46, 0x4c, 0xd1, 0x25, 0xc4, 0x66, 0xb5, 0xa9, 0x96, 0x67, 0x72, 0x0b, 0x1c, 0x11, 0x04, 0x68, 0x83, 0x1d, 0x05, 0x8a, 0xa1, 0xb8, 0x2a, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0xca, 0x9a, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x06, 0xaf, 0xd4, 0x6b, 0xcd, 0xfd, 0x22, 0xef, 0x94, 0xac, 0x12, 0x2a, 0xa1, 0x1f, 0x24, 0x12, 0x44, 0xa3, 0x7e, 0xcc, 0x88, 0xac, 0x80, 0x78, 0x40, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x20, 0xac, 0x9a, 0x87, 0xf5, 0x59, 0x4b, 0xe2, 0x08, 0xf8, 0x53, 0x2d, 0xb3, 0x8c, 0xff, 0x67, 0x0c, 0x45, 0x0e, 0xd2, 0xfe, 0xa8, 0xfc, 0xde, 0xfc, 0xc9, 0xa6, 0x63, 0xf7, 0x8b, 0xab, 0x96, 0x2b, 0x00, 0x65, 0xcd, 0x1d]))!

        let utxosSpent = [
            TransactionOutput(value: 420000000, script: .init(Data([0x51, 0x20, 0x53, 0xa1, 0xf6, 0xe4, 0x54, 0xdf, 0x1a, 0xa2, 0x77, 0x6a, 0x28, 0x14, 0xa7, 0x21, 0x37, 0x2d, 0x62, 0x58, 0x05, 0x0d, 0xe3, 0x30, 0xb3, 0xc6, 0xd1, 0x0e, 0xe8, 0xf4, 0xe0, 0xdd, 0xa3, 0x43]))),
            TransactionOutput(value: 462000000, script: .init(Data([0x51, 0x20, 0x14, 0x7c, 0x9c, 0x57, 0x13, 0x2f, 0x6e, 0x7e, 0xcd, 0xdb, 0xa9, 0x80, 0x0b, 0xb0, 0xc4, 0x44, 0x92, 0x51, 0xc9, 0x2a, 0x1e, 0x60, 0x37, 0x1e, 0xe7, 0x75, 0x57, 0xb6, 0x62, 0x0f, 0x3e, 0xa3]))),
            TransactionOutput(value: 294000000, script: .init(Data([0x76, 0xa9, 0x14, 0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54, 0x94, 0x1c, 0x45, 0xd1, 0xb3, 0xa3, 0x23, 0xf1, 0x43, 0x3b, 0xd6, 0x88, 0xac]))),
            TransactionOutput(value: 504000000, script: .init(Data([0x51, 0x20, 0xe4, 0xd8, 0x10, 0xfd, 0x50, 0x58, 0x62, 0x74, 0xfa, 0xce, 0x62, 0xb8, 0xa8, 0x07, 0xeb, 0x97, 0x19, 0xce, 0xf4, 0x9c, 0x04, 0x17, 0x7c, 0xc6, 0xb7, 0x6a, 0x9a, 0x42, 0x51, 0xd5, 0x45, 0x0e]))),
            TransactionOutput(value: 630000000, script: .init(Data([0x51, 0x20, 0x91, 0xb6, 0x4d, 0x53, 0x24, 0x72, 0x3a, 0x98, 0x51, 0x70, 0xe4, 0xdc, 0x5a, 0x0f, 0x84, 0xc0, 0x41, 0x80, 0x4f, 0x2c, 0xd1, 0x26, 0x60, 0xfa, 0x5d, 0xec, 0x09, 0xfc, 0x21, 0x78, 0x36, 0x05]))),
            TransactionOutput(value: 378000000, script: .init(Data([0x00, 0x14, 0x7d, 0xd6, 0x55, 0x92, 0xd0, 0xab, 0x2f, 0xe0, 0xd0, 0x25, 0x7d, 0x57, 0x1a, 0xbf, 0x03, 0x2c, 0xd9, 0xdb, 0x93, 0xdc]))),
            TransactionOutput(value: 672000000, script: .init(Data([0x51, 0x20, 0x75, 0x16, 0x9f, 0x40, 0x01, 0xaa, 0x68, 0xf1, 0x5b, 0xbe, 0xd2, 0x8b, 0x21, 0x8d, 0xf1, 0xd0, 0xa6, 0x2c, 0xbb, 0xcf, 0x11, 0x88, 0xc6, 0x66, 0x51, 0x10, 0xc2, 0x93, 0xc9, 0x07, 0xb8, 0x31]))),
            TransactionOutput(value: 546000000, script: .init(Data([0x51, 0x20, 0x71, 0x24, 0x47, 0x20, 0x6d, 0x7a, 0x52, 0x38, 0xac, 0xc7, 0xff, 0x53, 0xfb, 0xe9, 0x4a, 0x3b, 0x64, 0x53, 0x9a, 0xd2, 0x91, 0xc7, 0xcd, 0xbc, 0x49, 0x0b, 0x75, 0x77, 0xe4, 0xb1, 0x7d, 0xf5]))),
            TransactionOutput(value: 588000000, script: .init(Data([0x51, 0x20, 0x77, 0xe3, 0x0a, 0x55, 0x22, 0xdd, 0x9f, 0x89, 0x4c, 0x3f, 0x8b, 0x8b, 0xd4, 0xc4, 0xb2, 0xcf, 0x82, 0xca, 0x7d, 0xa8, 0xa3, 0xea, 0x6a, 0x23, 0x96, 0x55, 0xc3, 0x9c, 0x05, 0x0a, 0xb2, 0x20])))
        ]

        let intermediary = (
            hashAmounts: Data([0x58, 0xa6, 0x96, 0x4a, 0x4f, 0x5f, 0x8f, 0x0b, 0x64, 0x2d, 0xed, 0x0a, 0x8a, 0x55, 0x3b, 0xe7, 0x62, 0x2a, 0x71, 0x9d, 0xa7, 0x1d, 0x1f, 0x5b, 0xef, 0xce, 0xfc, 0xde, 0xe8, 0xe0, 0xfd, 0xe6]),
            hashOutputs: Data([0xa2, 0xe6, 0xda, 0xb7, 0xc1, 0xf0, 0xdc, 0xd2, 0x97, 0xc8, 0xd6, 0x16, 0x47, 0xfd, 0x17, 0xd8, 0x21, 0x54, 0x1e, 0xa6, 0x9c, 0x3c, 0xc3, 0x7d, 0xcb, 0xad, 0x7f, 0x90, 0xd4, 0xeb, 0x4b, 0xc5]),
            hashPrevouts: Data([0xe3, 0xb3, 0x3b, 0xb4, 0xef, 0x3a, 0x52, 0xad, 0x1f, 0xff, 0xb5, 0x55, 0xc0, 0xd8, 0x28, 0x28, 0xeb, 0x22, 0x73, 0x70, 0x36, 0xea, 0xeb, 0x02, 0xa2, 0x35, 0xd8, 0x2b, 0x90, 0x9c, 0x4c, 0x3f]),
            hashScriptPubkeys: Data([0x23, 0xad, 0x0f, 0x61, 0xad, 0x2b, 0xca, 0x5b, 0xa6, 0xa7, 0x69, 0x3f, 0x50, 0xfc, 0xe9, 0x88, 0xe1, 0x7c, 0x37, 0x80, 0xbf, 0x2b, 0x1e, 0x72, 0x0c, 0xfb, 0xb3, 0x8f, 0xbd, 0xd5, 0x2e, 0x21]),
            hashSequences: Data([0x18, 0x95, 0x9c, 0x72, 0x21, 0xab, 0x5c, 0xe9, 0xe2, 0x6c, 0x3c, 0xd6, 0x7b, 0x22, 0xc2, 0x4f, 0x8b, 0xaa, 0x54, 0xba, 0xc2, 0x81, 0xd8, 0xe6, 0xb0, 0x5e, 0x40, 0x0e, 0x6c, 0x3a, 0x95, 0x7e])
        )

        var cache = SighashCache()
        _ = tx.signatureMessageSchnorr(sighashType: SighashType?.none, inputIndex: 0, previousOutputs: utxosSpent, sighashCache: &cache)
        if let shaAmounts = cache.shaAmounts, let shaOuts = cache.shaOuts, let shaPrevouts = cache.shaPrevouts, let shaScriptPubKeys = cache.shaScriptPubKeys, let shaSequences = cache.shaSequences {
            XCTAssertEqual(shaAmounts, intermediary.hashAmounts)
            XCTAssertEqual(shaOuts, intermediary.hashOutputs)
            XCTAssertEqual(shaPrevouts, intermediary.hashPrevouts)
            XCTAssertEqual(shaScriptPubKeys, intermediary.hashScriptPubkeys)
            XCTAssertEqual(shaSequences, intermediary.hashSequences)
        } else {
            XCTFail("Could not produce some of the hashes required for the signature message.")
        }

        let inputSpending = [
            (
                given: (
                    txinIndex: 0,
                    internalSecretKey: Data([0x6b, 0x97, 0x3d, 0x88, 0x83, 0x8f, 0x27, 0x36, 0x6e, 0xd6, 0x1c, 0x9a, 0xd6, 0x36, 0x76, 0x63, 0x04, 0x5c, 0xb4, 0x56, 0xe2, 0x83, 0x35, 0xc1, 0x09, 0xe3, 0x07, 0x17, 0xae, 0x0c, 0x6b, 0xaa]),
                    merkleRoot: Data?.none,
                    sighashType: SighashType?.some(.single)
                ),
                intermediary: (
                    internalPubkey: Data([0xd6, 0x88, 0x9c, 0xb0, 0x81, 0x03, 0x6e, 0x0f, 0xae, 0xfa, 0x3a, 0x35, 0x15, 0x7a, 0xd7, 0x10, 0x86, 0xb1, 0x23, 0xb2, 0xb1, 0x44, 0xb6, 0x49, 0x79, 0x8b, 0x49, 0x4c, 0x30, 0x0a, 0x96, 0x1d]),
                    tweak: Data([0xb8, 0x6e, 0x7b, 0xe8, 0xf3, 0x9b, 0xab, 0x32, 0xa6, 0xf2, 0xc0, 0x44, 0x3a, 0xbb, 0xc2, 0x10, 0xf0, 0xed, 0xac, 0x0e, 0x2c, 0x53, 0xd5, 0x01, 0xb3, 0x6b, 0x64, 0x43, 0x7d, 0x9c, 0x6c, 0x70]),
                    tweakedSecretKey: Data([0x24, 0x05, 0xb9, 0x71, 0x77, 0x2a, 0xd2, 0x69, 0x15, 0xc8, 0xdc, 0xdf, 0x10, 0xf2, 0x38, 0x75, 0x3a, 0x9b, 0x83, 0x7e, 0x5f, 0x8e, 0x6a, 0x86, 0xfd, 0x7c, 0x0c, 0xce, 0x5b, 0x72, 0x96, 0xd9]),
                    sigMsg: Data([0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0xe3, 0xb3, 0x3b, 0xb4, 0xef, 0x3a, 0x52, 0xad, 0x1f, 0xff, 0xb5, 0x55, 0xc0, 0xd8, 0x28, 0x28, 0xeb, 0x22, 0x73, 0x70, 0x36, 0xea, 0xeb, 0x02, 0xa2, 0x35, 0xd8, 0x2b, 0x90, 0x9c, 0x4c, 0x3f, 0x58, 0xa6, 0x96, 0x4a, 0x4f, 0x5f, 0x8f, 0x0b, 0x64, 0x2d, 0xed, 0x0a, 0x8a, 0x55, 0x3b, 0xe7, 0x62, 0x2a, 0x71, 0x9d, 0xa7, 0x1d, 0x1f, 0x5b, 0xef, 0xce, 0xfc, 0xde, 0xe8, 0xe0, 0xfd, 0xe6, 0x23, 0xad, 0x0f, 0x61, 0xad, 0x2b, 0xca, 0x5b, 0xa6, 0xa7, 0x69, 0x3f, 0x50, 0xfc, 0xe9, 0x88, 0xe1, 0x7c, 0x37, 0x80, 0xbf, 0x2b, 0x1e, 0x72, 0x0c, 0xfb, 0xb3, 0x8f, 0xbd, 0xd5, 0x2e, 0x21, 0x18, 0x95, 0x9c, 0x72, 0x21, 0xab, 0x5c, 0xe9, 0xe2, 0x6c, 0x3c, 0xd6, 0x7b, 0x22, 0xc2, 0x4f, 0x8b, 0xaa, 0x54, 0xba, 0xc2, 0x81, 0xd8, 0xe6, 0xb0, 0x5e, 0x40, 0x0e, 0x6c, 0x3a, 0x95, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x41, 0x8f, 0x0e, 0x9a, 0x36, 0x24, 0x5b, 0x9a, 0x50, 0xec, 0x87, 0xf8, 0xbf, 0x5b, 0xe5, 0xbc, 0xae, 0x43, 0x43, 0x37, 0xb8, 0x71, 0x39, 0xc3, 0xa5, 0xb1, 0xf5, 0x6e, 0x33, 0xcb, 0xa0]),
                    precomputedUsed: (
                        hashAmounts: true,
                        hashPrevouts: true,
                        hashScriptPubkeys: true,
                        hashSequences: true,
                        hashOutputs: false
                    ),
                    sighash: Data([0x25, 0x14, 0xa6, 0x27, 0x2f, 0x85, 0xcf, 0xa0, 0xf4, 0x5e, 0xb9, 0x07, 0xfc, 0xb0, 0xd1, 0x21, 0xb8, 0x08, 0xed, 0x37, 0xc6, 0xea, 0x16, 0x0a, 0x5a, 0x90, 0x46, 0xed, 0x55, 0x26, 0xd5, 0x55])
                ),
                expectedWitness:[
                    Data([0xed, 0x7c, 0x16, 0x47, 0xcb, 0x97, 0x37, 0x9e, 0x76, 0x89, 0x2b, 0xe0, 0xca, 0xcf, 0xf5, 0x7e, 0xc4, 0xa7, 0x10, 0x2a, 0xa2, 0x42, 0x96, 0xca, 0x39, 0xaf, 0x75, 0x41, 0x24, 0x6d, 0x8f, 0xf1, 0x4d, 0x38, 0x95, 0x8d, 0x4c, 0xc1, 0xe2, 0xe4, 0x78, 0xe4, 0xd4, 0xa7, 0x64, 0xbb, 0xfd, 0x83, 0x5b, 0x16, 0xd4, 0xe3, 0x14, 0xb7, 0x29, 0x37, 0xb2, 0x98, 0x33, 0x06, 0x0b, 0x87, 0x27, 0x6c, 0x03])
                ]
            ),
            (
                given: (
                    txinIndex: 1,
                    internalSecretKey: Data([0x1e, 0x4d, 0xa4, 0x9f, 0x6a, 0xaf, 0x4e, 0x5c, 0xd1, 0x75, 0xfe, 0x08, 0xa3, 0x2b, 0xb5, 0xcb, 0x48, 0x63, 0xd9, 0x63, 0x92, 0x12, 0x55, 0xf3, 0x3d, 0x3b, 0xc3, 0x1e, 0x13, 0x43, 0x90, 0x7f]),
                    merkleRoot: Data?.some(Data([0x5b, 0x75, 0xad, 0xec, 0xf5, 0x35, 0x48, 0xf3, 0xec, 0x6a, 0xd7, 0xd7, 0x83, 0x83, 0xbf, 0x84, 0xcc, 0x57, 0xb5, 0x5a, 0x31, 0x27, 0xc7, 0x2b, 0x9a, 0x24, 0x81, 0x75, 0x2d, 0xd8, 0x8b, 0x21])),
                    sighashType: SighashType?.some(.singleAnyCanPay) // .init(rawValue: 131)
                ),
                intermediary: (
                    internalPubkey: Data([0x18, 0x77, 0x91, 0xb6, 0xf7, 0x12, 0xa8, 0xea, 0x41, 0xc8, 0xec, 0xdd, 0x0e, 0xe7, 0x7f, 0xab, 0x3e, 0x85, 0x26, 0x3b, 0x37, 0xe1, 0xec, 0x18, 0xa3, 0x65, 0x19, 0x26, 0xb3, 0xa6, 0xcf, 0x27]),
                    tweak: Data([0xcb, 0xd8, 0x67, 0x9b, 0xa6, 0x36, 0xc1, 0x11, 0x0e, 0xa2, 0x47, 0x54, 0x2c, 0xfb, 0xd9, 0x64, 0x13, 0x1a, 0x6b, 0xe8, 0x4f, 0x87, 0x3f, 0x7f, 0x3b, 0x62, 0xa7, 0x77, 0x52, 0x8e, 0xd0, 0x01]),
                    tweakedSecretKey: Data([0xea, 0x26, 0x0c, 0x3b, 0x10, 0xe6, 0x0f, 0x6d, 0xe0, 0x18, 0x45, 0x5c, 0xd0, 0x27, 0x8f, 0x2f, 0x5b, 0x7e, 0x45, 0x4b, 0xe1, 0x99, 0x95, 0x72, 0x78, 0x9e, 0x6a, 0x95, 0x65, 0xd2, 0x60, 0x80]),
                    sigMsg: Data([0x00, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0x00, 0xd7, 0xb7, 0xca, 0xb5, 0x7b, 0x13, 0x93, 0xac, 0xe2, 0xd0, 0x64, 0xf4, 0xd4, 0xa2, 0xcb, 0x8a, 0xf6, 0xde, 0xf6, 0x12, 0x73, 0xe1, 0x27, 0x51, 0x7d, 0x44, 0x75, 0x9b, 0x6d, 0xaf, 0xdd, 0x99, 0x00, 0x00, 0x00, 0x00, 0x80, 0x8f, 0x89, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x22, 0x51, 0x20, 0x14, 0x7c, 0x9c, 0x57, 0x13, 0x2f, 0x6e, 0x7e, 0xcd, 0xdb, 0xa9, 0x80, 0x0b, 0xb0, 0xc4, 0x44, 0x92, 0x51, 0xc9, 0x2a, 0x1e, 0x60, 0x37, 0x1e, 0xe7, 0x75, 0x57, 0xb6, 0x62, 0x0f, 0x3e, 0xa3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0xf8, 0xfb, 0x4c, 0xa7, 0xef, 0xc5, 0x43, 0x3f, 0x59, 0x1e, 0xcf, 0xc5, 0x73, 0x91, 0x81, 0x1c, 0xe1, 0xe1, 0x86, 0xa3, 0x79, 0x30, 0x24, 0xde, 0xf5, 0xc8, 0x84, 0xcb, 0xa5, 0x1d]),
                    precomputedUsed: (
                        hashAmounts: false,
                        hashPrevouts: false,
                        hashScriptPubkeys: false,
                        hashSequences: false,
                        hashOutputs: false
                    ),
                    sighash: Data([0x32, 0x5a, 0x64, 0x4a, 0xf4, 0x7e, 0x8a, 0x5a, 0x25, 0x91, 0xcd, 0xa0, 0xab, 0x07, 0x23, 0x97, 0x85, 0x37, 0x31, 0x8f, 0x10, 0xe6, 0xa6, 0x3d, 0x4e, 0xed, 0x78, 0x3b, 0x96, 0xa7, 0x1a, 0x4d])
                ),
                expectedWitness:[
                    Data([0x05, 0x2a, 0xed, 0xff, 0xc5, 0x54, 0xb4, 0x1f, 0x52, 0xb5, 0x21, 0x07, 0x17, 0x93, 0xa6, 0xb8, 0x8d, 0x6d, 0xbc, 0xa9, 0xdb, 0xa9, 0x4c, 0xf3, 0x4c, 0x83, 0x69, 0x6d, 0xe0, 0xc1, 0xec, 0x35, 0xca, 0x9c, 0x5e, 0xd4, 0xab, 0x28, 0x05, 0x9b, 0xd6, 0x06, 0xa4, 0xf3, 0xa6, 0x57, 0xee, 0xc0, 0xbb, 0x96, 0x66, 0x1d, 0x42, 0x92, 0x1b, 0x5f, 0x50, 0xa9, 0x5a, 0xd3, 0x36, 0x75, 0xb5, 0x4f, 0x83])
                ]
            ),
            (
                given: (
                    txinIndex: 3,
                    internalSecretKey: Data([0xd3, 0xc7, 0xaf, 0x07, 0xda, 0x2d, 0x54, 0xf7, 0xa7, 0x73, 0x5d, 0x3d, 0x0f, 0xc4, 0xf0, 0xa7, 0x31, 0x64, 0xdb, 0x63, 0x8b, 0x2f, 0x2f, 0x7c, 0x43, 0xf7, 0x11, 0xf6, 0xd4, 0xaa, 0x7e, 0x64]),
                    merkleRoot: Data?.some(Data([0xc5, 0x25, 0x71, 0x4a, 0x7f, 0x49, 0xc2, 0x8a, 0xed, 0xbb, 0xba, 0x78, 0xc0, 0x05, 0x93, 0x1a, 0x81, 0xc2, 0x34, 0xb2, 0xf6, 0xc9, 0x9a, 0x73, 0xe4, 0xd0, 0x60, 0x82, 0xad, 0xc8, 0xbf, 0x2b])),
                    sighashType: .all
                ),
                intermediary: (
                    internalPubkey: Data([0x93, 0x47, 0x8e, 0x94, 0x88, 0xf9, 0x56, 0xdf, 0x23, 0x96, 0xbe, 0x2c, 0xe6, 0xc5, 0xcc, 0xed, 0x75, 0xf9, 0x00, 0xdf, 0xa1, 0x8e, 0x7d, 0xab, 0xd2, 0x42, 0x8a, 0xae, 0x78, 0x45, 0x18, 0x20]),
                    tweak: Data([0x6a, 0xf9, 0xe2, 0x8d, 0xbf, 0x9d, 0x6a, 0xaf, 0x02, 0x76, 0x96, 0xe2, 0x59, 0x8a, 0x5b, 0x3d, 0x05, 0x6f, 0x5f, 0xd2, 0x35, 0x5a, 0x7f, 0xd5, 0xa3, 0x7a, 0x0e, 0x50, 0x08, 0x13, 0x2d, 0x30]),
                    tweakedSecretKey: Data([0x97, 0x32, 0x33, 0x85, 0xe5, 0x70, 0x15, 0xb7, 0x5b, 0x03, 0x39, 0xa5, 0x49, 0xc5, 0x6a, 0x94, 0x8e, 0xb9, 0x61, 0x55, 0x59, 0x73, 0xf0, 0x95, 0x1f, 0x55, 0x5a, 0xe6, 0x03, 0x9e, 0xf0, 0x0d]),
                    sigMsg: Data([0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0xe3, 0xb3, 0x3b, 0xb4, 0xef, 0x3a, 0x52, 0xad, 0x1f, 0xff, 0xb5, 0x55, 0xc0, 0xd8, 0x28, 0x28, 0xeb, 0x22, 0x73, 0x70, 0x36, 0xea, 0xeb, 0x02, 0xa2, 0x35, 0xd8, 0x2b, 0x90, 0x9c, 0x4c, 0x3f, 0x58, 0xa6, 0x96, 0x4a, 0x4f, 0x5f, 0x8f, 0x0b, 0x64, 0x2d, 0xed, 0x0a, 0x8a, 0x55, 0x3b, 0xe7, 0x62, 0x2a, 0x71, 0x9d, 0xa7, 0x1d, 0x1f, 0x5b, 0xef, 0xce, 0xfc, 0xde, 0xe8, 0xe0, 0xfd, 0xe6, 0x23, 0xad, 0x0f, 0x61, 0xad, 0x2b, 0xca, 0x5b, 0xa6, 0xa7, 0x69, 0x3f, 0x50, 0xfc, 0xe9, 0x88, 0xe1, 0x7c, 0x37, 0x80, 0xbf, 0x2b, 0x1e, 0x72, 0x0c, 0xfb, 0xb3, 0x8f, 0xbd, 0xd5, 0x2e, 0x21, 0x18, 0x95, 0x9c, 0x72, 0x21, 0xab, 0x5c, 0xe9, 0xe2, 0x6c, 0x3c, 0xd6, 0x7b, 0x22, 0xc2, 0x4f, 0x8b, 0xaa, 0x54, 0xba, 0xc2, 0x81, 0xd8, 0xe6, 0xb0, 0x5e, 0x40, 0x0e, 0x6c, 0x3a, 0x95, 0x7e, 0xa2, 0xe6, 0xda, 0xb7, 0xc1, 0xf0, 0xdc, 0xd2, 0x97, 0xc8, 0xd6, 0x16, 0x47, 0xfd, 0x17, 0xd8, 0x21, 0x54, 0x1e, 0xa6, 0x9c, 0x3c, 0xc3, 0x7d, 0xcb, 0xad, 0x7f, 0x90, 0xd4, 0xeb, 0x4b, 0xc5, 0x00, 0x03, 0x00, 0x00, 0x00]),
                    precomputedUsed: (
                        hashAmounts: true,
                        hashPrevouts: true,
                        hashScriptPubkeys: true,
                        hashSequences: true,
                        hashOutputs: true
                    ),
                    sighash: Data([0xbf, 0x01, 0x3e, 0xa9, 0x34, 0x74, 0xaa, 0x67, 0x81, 0x5b, 0x1b, 0x6c, 0xc4, 0x41, 0xd2, 0x3b, 0x64, 0xfa, 0x31, 0x09, 0x11, 0xd9, 0x91, 0xe7, 0x13, 0xcd, 0x34, 0xc7, 0xf5, 0xd4, 0x66, 0x69])
                ),
                expectedWitness:[
                    Data([0xff, 0x45, 0xf7, 0x42, 0xa8, 0x76, 0x13, 0x99, 0x46, 0xa1, 0x49, 0xab, 0x4d, 0x91, 0x85, 0x57, 0x4b, 0x98, 0xdc, 0x91, 0x9d, 0x2e, 0xb6, 0x75, 0x4f, 0x8a, 0xba, 0xa5, 0x9d, 0x18, 0xb0, 0x25, 0x63, 0x7a, 0x3a, 0xa0, 0x43, 0xb9, 0x18, 0x17, 0x73, 0x95, 0x54, 0xf4, 0xed, 0x20, 0x26, 0xcf, 0x80, 0x22, 0xdb, 0xd8, 0x3e, 0x35, 0x1c, 0xe1, 0xfa, 0xbc, 0x27, 0x28, 0x41, 0xd2, 0x51, 0x0a, 0x01])
                ]
            ),
            (
                given: (
                    txinIndex: 4,
                    internalSecretKey: Data([0xf3, 0x6b, 0xb0, 0x7a, 0x11, 0xe4, 0x69, 0xce, 0x94, 0x1d, 0x16, 0xb6, 0x3b, 0x11, 0xb9, 0xb9, 0x12, 0x0a, 0x84, 0xd9, 0xd8, 0x7c, 0xff, 0x2c, 0x84, 0xa8, 0xd4, 0xaf, 0xfb, 0x43, 0x8f, 0x4e]),
                    merkleRoot: Data?.some(Data([0xcc, 0xbd, 0x66, 0xc6, 0xf7, 0xe8, 0xfd, 0xab, 0x47, 0xb3, 0xa4, 0x86, 0xf5, 0x9d, 0x28, 0x26, 0x2b, 0xe8, 0x57, 0xf3, 0x0d, 0x47, 0x73, 0xf2, 0xd5, 0xea, 0x47, 0xf7, 0x76, 0x1c, 0xe0, 0xe2])),
                    sighashType: Optional.none
                ),
                intermediary: (
                    internalPubkey: Data([0xe0, 0xdf, 0xe2, 0x30, 0x0b, 0x0d, 0xd7, 0x46, 0xa3, 0xf8, 0x67, 0x4d, 0xfd, 0x45, 0x25, 0x62, 0x36, 0x39, 0x04, 0x25, 0x69, 0xd8, 0x29, 0xc7, 0xf0, 0xee, 0xd9, 0x60, 0x2d, 0x26, 0x3e, 0x6f]),
                    tweak: Data([0xb5, 0x7b, 0xfa, 0x18, 0x3d, 0x28, 0xee, 0xb6, 0xad, 0x68, 0x8d, 0xda, 0xab, 0xb2, 0x65, 0xb4, 0xa4, 0x1f, 0xbf, 0x68, 0xe5, 0xfe, 0xd2, 0xc7, 0x2c, 0x74, 0xde, 0x70, 0xd5, 0xa7, 0x86, 0xf4]),
                    tweakedSecretKey: Data([0xa8, 0xe7, 0xaa, 0x92, 0x4f, 0x0d, 0x58, 0x85, 0x41, 0x85, 0xa4, 0x90, 0xe6, 0xc4, 0x1f, 0x6e, 0xfb, 0x7b, 0x67, 0x5c, 0x0f, 0x33, 0x31, 0xb7, 0xf1, 0x4b, 0x54, 0x94, 0x00, 0xb4, 0xd5, 0x01]),
                    sigMsg: Data([0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0xe3, 0xb3, 0x3b, 0xb4, 0xef, 0x3a, 0x52, 0xad, 0x1f, 0xff, 0xb5, 0x55, 0xc0, 0xd8, 0x28, 0x28, 0xeb, 0x22, 0x73, 0x70, 0x36, 0xea, 0xeb, 0x02, 0xa2, 0x35, 0xd8, 0x2b, 0x90, 0x9c, 0x4c, 0x3f, 0x58, 0xa6, 0x96, 0x4a, 0x4f, 0x5f, 0x8f, 0x0b, 0x64, 0x2d, 0xed, 0x0a, 0x8a, 0x55, 0x3b, 0xe7, 0x62, 0x2a, 0x71, 0x9d, 0xa7, 0x1d, 0x1f, 0x5b, 0xef, 0xce, 0xfc, 0xde, 0xe8, 0xe0, 0xfd, 0xe6, 0x23, 0xad, 0x0f, 0x61, 0xad, 0x2b, 0xca, 0x5b, 0xa6, 0xa7, 0x69, 0x3f, 0x50, 0xfc, 0xe9, 0x88, 0xe1, 0x7c, 0x37, 0x80, 0xbf, 0x2b, 0x1e, 0x72, 0x0c, 0xfb, 0xb3, 0x8f, 0xbd, 0xd5, 0x2e, 0x21, 0x18, 0x95, 0x9c, 0x72, 0x21, 0xab, 0x5c, 0xe9, 0xe2, 0x6c, 0x3c, 0xd6, 0x7b, 0x22, 0xc2, 0x4f, 0x8b, 0xaa, 0x54, 0xba, 0xc2, 0x81, 0xd8, 0xe6, 0xb0, 0x5e, 0x40, 0x0e, 0x6c, 0x3a, 0x95, 0x7e, 0xa2, 0xe6, 0xda, 0xb7, 0xc1, 0xf0, 0xdc, 0xd2, 0x97, 0xc8, 0xd6, 0x16, 0x47, 0xfd, 0x17, 0xd8, 0x21, 0x54, 0x1e, 0xa6, 0x9c, 0x3c, 0xc3, 0x7d, 0xcb, 0xad, 0x7f, 0x90, 0xd4, 0xeb, 0x4b, 0xc5, 0x00, 0x04, 0x00, 0x00, 0x00]),
                    precomputedUsed: (
                        hashAmounts: true,
                        hashPrevouts: true,
                        hashScriptPubkeys: true,
                        hashSequences: true,
                        hashOutputs: true
                    ),
                    sighash: Data([0x4f, 0x90, 0x0a, 0x0b, 0xae, 0x3f, 0x14, 0x46, 0xfd, 0x48, 0x49, 0x0c, 0x29, 0x58, 0xb5, 0xa0, 0x23, 0x22, 0x8f, 0x01, 0x66, 0x1c, 0xda, 0x34, 0x96, 0xa1, 0x1d, 0xa5, 0x02, 0xa7, 0xf7, 0xef])
                ),
                expectedWitness:[
                    Data([0xb4, 0x01, 0x0d, 0xd4, 0x8a, 0x61, 0x7d, 0xb0, 0x99, 0x26, 0xf7, 0x29, 0xe7, 0x9c, 0x33, 0xae, 0x0b, 0x4e, 0x94, 0xb7, 0x9f, 0x04, 0xa1, 0xae, 0x93, 0xed, 0xe6, 0x31, 0x5e, 0xb3, 0x66, 0x9d, 0xe1, 0x85, 0xa1, 0x7d, 0x2b, 0x0a, 0xc9, 0xee, 0x09, 0xfd, 0x4c, 0x64, 0xb6, 0x78, 0xa0, 0xb6, 0x1a, 0x0a, 0x86, 0xfa, 0x88, 0x8a, 0x27, 0x3c, 0x85, 0x11, 0xbe, 0x83, 0xbf, 0xd6, 0x81, 0x0f])
                ]
            ),
            (
                given: (
                    txinIndex: 6,
                    internalSecretKey: Data([0x41, 0x5c, 0xfe, 0x9c, 0x15, 0xd9, 0xce, 0xa2, 0x7d, 0x81, 0x04, 0xd5, 0x51, 0x7c, 0x06, 0xe9, 0xde, 0x48, 0xe2, 0xf9, 0x86, 0xb6, 0x95, 0xe4, 0xf5, 0xff, 0xeb, 0xf2, 0x30, 0xe7, 0x25, 0xd8]),
                    merkleRoot: Data?.some(Data([0x2f, 0x6b, 0x2c, 0x53, 0x97, 0xb6, 0xd6, 0x8c, 0xa1, 0x8e, 0x09, 0xa3, 0xf0, 0x51, 0x61, 0x66, 0x8f, 0xfe, 0x93, 0xa9, 0x88, 0x58, 0x2d, 0x55, 0xc6, 0xf0, 0x7b, 0xd5, 0xb3, 0x32, 0x9d, 0xef])),
                    sighashType: SighashType.none
                ),
                intermediary: (
                    internalPubkey: Data([0x55, 0xad, 0xf4, 0xe8, 0x96, 0x7f, 0xbd, 0x2e, 0x29, 0xf2, 0x0a, 0xc8, 0x96, 0xe6, 0x0c, 0x3b, 0x0f, 0x1d, 0x5b, 0x0e, 0xfa, 0x9d, 0x34, 0x94, 0x1b, 0x59, 0x58, 0xc7, 0xb0, 0xa0, 0x31, 0x2d]),
                    tweak: Data([0x65, 0x79, 0x13, 0x8e, 0x79, 0x76, 0xdc, 0x13, 0xb6, 0xa9, 0x2f, 0x7b, 0xfd, 0x5a, 0x2f, 0xc7, 0x68, 0x4f, 0x5e, 0xa4, 0x24, 0x19, 0xd4, 0x33, 0x68, 0x30, 0x14, 0x70, 0xf3, 0xb7, 0x4e, 0xd9]),
                    tweakedSecretKey: Data([0x24, 0x1c, 0x14, 0xf2, 0x63, 0x9d, 0x0d, 0x71, 0x39, 0x28, 0x2a, 0xa6, 0xab, 0xde, 0x28, 0xdd, 0x8a, 0x06, 0x7b, 0xaa, 0x9d, 0x63, 0x3e, 0x4e, 0x72, 0x30, 0x28, 0x7e, 0xc2, 0xd0, 0x29, 0x01]),
                    sigMsg: Data([0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0xe3, 0xb3, 0x3b, 0xb4, 0xef, 0x3a, 0x52, 0xad, 0x1f, 0xff, 0xb5, 0x55, 0xc0, 0xd8, 0x28, 0x28, 0xeb, 0x22, 0x73, 0x70, 0x36, 0xea, 0xeb, 0x02, 0xa2, 0x35, 0xd8, 0x2b, 0x90, 0x9c, 0x4c, 0x3f, 0x58, 0xa6, 0x96, 0x4a, 0x4f, 0x5f, 0x8f, 0x0b, 0x64, 0x2d, 0xed, 0x0a, 0x8a, 0x55, 0x3b, 0xe7, 0x62, 0x2a, 0x71, 0x9d, 0xa7, 0x1d, 0x1f, 0x5b, 0xef, 0xce, 0xfc, 0xde, 0xe8, 0xe0, 0xfd, 0xe6, 0x23, 0xad, 0x0f, 0x61, 0xad, 0x2b, 0xca, 0x5b, 0xa6, 0xa7, 0x69, 0x3f, 0x50, 0xfc, 0xe9, 0x88, 0xe1, 0x7c, 0x37, 0x80, 0xbf, 0x2b, 0x1e, 0x72, 0x0c, 0xfb, 0xb3, 0x8f, 0xbd, 0xd5, 0x2e, 0x21, 0x18, 0x95, 0x9c, 0x72, 0x21, 0xab, 0x5c, 0xe9, 0xe2, 0x6c, 0x3c, 0xd6, 0x7b, 0x22, 0xc2, 0x4f, 0x8b, 0xaa, 0x54, 0xba, 0xc2, 0x81, 0xd8, 0xe6, 0xb0, 0x5e, 0x40, 0x0e, 0x6c, 0x3a, 0x95, 0x7e, 0x00, 0x06, 0x00, 0x00, 0x00]),
                    precomputedUsed: (
                        hashAmounts: true,
                        hashPrevouts: true,
                        hashScriptPubkeys: true,
                        hashSequences: true,
                        hashOutputs: false
                    ),
                    sighash: Data([0x15, 0xf2, 0x5c, 0x29, 0x8e, 0xb5, 0xcd, 0xc7, 0xeb, 0x1d, 0x63, 0x8d, 0xd2, 0xd4, 0x5c, 0x97, 0xc4, 0xc5, 0x9d, 0xca, 0xec, 0x66, 0x79, 0xcf, 0xc1, 0x6a, 0xd8, 0x4f, 0x30, 0x87, 0x6b, 0x85])
                ),
                expectedWitness: [
                    Data([0xa3, 0x78, 0x59, 0x19, 0xa2, 0xce, 0x3c, 0x4c, 0xe2, 0x6f, 0x29, 0x8c, 0x3d, 0x51, 0x61, 0x9b, 0xc4, 0x74, 0xae, 0x24, 0x01, 0x4b, 0xcd, 0xd3, 0x13, 0x28, 0xcd, 0x8c, 0xfb, 0xab, 0x2e, 0xff, 0x33, 0x95, 0xfa, 0x0a, 0x16, 0xfe, 0x5f, 0x48, 0x6d, 0x12, 0xf2, 0x2a, 0x9c, 0xed, 0xde, 0xd5, 0xae, 0x74, 0xfe, 0xb4, 0xbb, 0xe5, 0x35, 0x13, 0x46, 0x50, 0x8c, 0x54, 0x05, 0xbc, 0xfe, 0xe0, 0x02])
                ]
            ),
            (
                given: (
                    txinIndex: 7,
                    internalSecretKey: Data([0xc7, 0xb0, 0xe8, 0x1f, 0x0a, 0x9a, 0x0b, 0x04, 0x99, 0xe1, 0x12, 0x27, 0x9d, 0x71, 0x8c, 0xca, 0x98, 0xe7, 0x9a, 0x12, 0xe2, 0xf1, 0x37, 0xc7, 0x2a, 0xe5, 0xb2, 0x13, 0xaa, 0xd0, 0xd1, 0x03]),
                    merkleRoot: Data?.some(Data([0x6c, 0x2d, 0xc1, 0x06, 0xab, 0x81, 0x6b, 0x73, 0xf9, 0xd0, 0x7e, 0x3c, 0xd1, 0xef, 0x2c, 0x8c, 0x12, 0x56, 0xf5, 0x19, 0x74, 0x8e, 0x08, 0x13, 0xe4, 0xed, 0xd2, 0x40, 0x5d, 0x27, 0x7b, 0xef])),
                    sighashType: .noneAnyCanPay
                ),
                intermediary: (
                    internalPubkey: Data([0xee, 0x4f, 0xe0, 0x85, 0x98, 0x34, 0x62, 0xa1, 0x84, 0x01, 0x5d, 0x1f, 0x78, 0x2d, 0x6a, 0x5f, 0x8b, 0x9c, 0x2b, 0x60, 0x13, 0x0a, 0xff, 0x05, 0x0c, 0xe2, 0x21, 0xec, 0xf3, 0x78, 0x65, 0x92]),
                    tweak: Data([0x9e, 0x05, 0x17, 0xed, 0xc8, 0x25, 0x9b, 0xb3, 0x35, 0x92, 0x55, 0x40, 0x0b, 0x23, 0xca, 0x95, 0x07, 0xf2, 0xa9, 0x1c, 0xd1, 0xe4, 0x25, 0x0b, 0xa0, 0x68, 0xb4, 0xea, 0xfc, 0xeb, 0xa4, 0xa9]),
                    tweakedSecretKey: Data([0x65, 0xb6, 0x00, 0x0c, 0xd2, 0xbf, 0xa6, 0xb7, 0xcf, 0x73, 0x67, 0x67, 0xa8, 0x95, 0x57, 0x60, 0xe6, 0x2b, 0x66, 0x49, 0x05, 0x8c, 0xbc, 0x97, 0x0b, 0x7c, 0x08, 0x71, 0xd7, 0x86, 0x34, 0x6b]),
                    sigMsg: Data([0x00, 0x82, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0x00, 0xe9, 0xaa, 0x6b, 0x8e, 0x6c, 0x9d, 0xe6, 0x76, 0x19, 0xe6, 0xa3, 0x92, 0x4a, 0xe2, 0x56, 0x96, 0xbb, 0x7b, 0x69, 0x4b, 0xb6, 0x77, 0xa6, 0x32, 0xa7, 0x4e, 0xf7, 0xea, 0xdf, 0xd4, 0xea, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x8b, 0x20, 0x00, 0x00, 0x00, 0x00, 0x22, 0x51, 0x20, 0x71, 0x24, 0x47, 0x20, 0x6d, 0x7a, 0x52, 0x38, 0xac, 0xc7, 0xff, 0x53, 0xfb, 0xe9, 0x4a, 0x3b, 0x64, 0x53, 0x9a, 0xd2, 0x91, 0xc7, 0xcd, 0xbc, 0x49, 0x0b, 0x75, 0x77, 0xe4, 0xb1, 0x7d, 0xf5, 0xff, 0xff, 0xff, 0xff]),
                    precomputedUsed: (
                        hashAmounts: false,
                        hashPrevouts: false,
                        hashScriptPubkeys: false,
                        hashSequences: false,
                        hashOutputs: false
                    ),
                    sighash: Data([0xcd, 0x29, 0x2d, 0xe5, 0x03, 0x13, 0x80, 0x4d, 0xab, 0xe4, 0x68, 0x5e, 0x83, 0xf9, 0x23, 0xd2, 0x96, 0x95, 0x77, 0x19, 0x1a, 0x3e, 0x1d, 0x28, 0x82, 0x22, 0x0d, 0xca, 0x88, 0xcb, 0xeb, 0x10])
                ),
                expectedWitness: [
                    Data([0xea, 0x0c, 0x6b, 0xa9, 0x07, 0x63, 0xc2, 0xd3, 0xa2, 0x96, 0xad, 0x82, 0xba, 0x45, 0x88, 0x1a, 0xbb, 0x4f, 0x42, 0x6b, 0x3f, 0x87, 0xaf, 0x16, 0x2d, 0xd2, 0x4d, 0x51, 0x09, 0xed, 0xc1, 0xcd, 0xd1, 0x19, 0x15, 0x09, 0x5b, 0xa4, 0x7c, 0x3a, 0x99, 0x63, 0xdc, 0x1e, 0x6c, 0x43, 0x29, 0x39, 0x87, 0x2b, 0xc4, 0x92, 0x12, 0xfe, 0x34, 0xc6, 0x32, 0xcd, 0x3a, 0xb9, 0xfe, 0xd4, 0x29, 0xc4, 0x82])
                ]
            ),
            (
                given: (
                    txinIndex: 8,
                    internalSecretKey: Data([0x77, 0x86, 0x34, 0x16, 0xbe, 0x0d, 0x06, 0x65, 0xe5, 0x17, 0xe1, 0xc3, 0x75, 0xfd, 0x6f, 0x75, 0x83, 0x95, 0x44, 0xec, 0xa5, 0x53, 0x67, 0x5e, 0xf7, 0xfd, 0xf4, 0x94, 0x95, 0x18, 0xeb, 0xaa]),
                    merkleRoot: Data([0xab, 0x17, 0x94, 0x31, 0xc2, 0x8d, 0x3b, 0x68, 0xfb, 0x79, 0x89, 0x57, 0xfa, 0xf5, 0x49, 0x7d, 0x69, 0xc8, 0x83, 0xc6, 0xfb, 0x1e, 0x1c, 0xd9, 0xf8, 0x14, 0x83, 0xd8, 0x7b, 0xac, 0x90, 0xcc]),
                    sighashType: .allAnyCanPay
                ),
                intermediary: (
                    internalPubkey: Data([0xf9, 0xf4, 0x00, 0x80, 0x3e, 0x68, 0x37, 0x27, 0xb1, 0x4f, 0x46, 0x38, 0x36, 0xe1, 0xe7, 0x8e, 0x1c, 0x64, 0x41, 0x76, 0x38, 0xaa, 0x06, 0x69, 0x19, 0x29, 0x1a, 0x22, 0x5f, 0x0e, 0x8d, 0xd8]),
                    tweak: Data([0x63, 0x9f, 0x02, 0x81, 0xb7, 0xac, 0x49, 0xe7, 0x42, 0xcd, 0x25, 0xb7, 0xf1, 0x88, 0x65, 0x76, 0x26, 0xda, 0x1a, 0xd1, 0x69, 0x20, 0x90, 0x78, 0xe2, 0x76, 0x1c, 0xef, 0xd9, 0x1f, 0xd6, 0x5e]),
                    tweakedSecretKey: Data([0xec, 0x18, 0xce, 0x6a, 0xf9, 0x9f, 0x43, 0x81, 0x5d, 0xb5, 0x43, 0xf4, 0x7b, 0x8a, 0xf5, 0xff, 0x5d, 0xf3, 0xb2, 0xcb, 0x73, 0x15, 0xc9, 0x55, 0xaa, 0x4a, 0x86, 0xe8, 0x14, 0x3d, 0x2b, 0xf5]),
                    sigMsg: Data([0x00, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0x1d, 0xa2, 0xe6, 0xda, 0xb7, 0xc1, 0xf0, 0xdc, 0xd2, 0x97, 0xc8, 0xd6, 0x16, 0x47, 0xfd, 0x17, 0xd8, 0x21, 0x54, 0x1e, 0xa6, 0x9c, 0x3c, 0xc3, 0x7d, 0xcb, 0xad, 0x7f, 0x90, 0xd4, 0xeb, 0x4b, 0xc5, 0x00, 0xa7, 0x78, 0xeb, 0x6a, 0x26, 0x3d, 0xc0, 0x90, 0x46, 0x4c, 0xd1, 0x25, 0xc4, 0x66, 0xb5, 0xa9, 0x96, 0x67, 0x72, 0x0b, 0x1c, 0x11, 0x04, 0x68, 0x83, 0x1d, 0x05, 0x8a, 0xa1, 0xb8, 0x2a, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x00, 0x22, 0x51, 0x20, 0x77, 0xe3, 0x0a, 0x55, 0x22, 0xdd, 0x9f, 0x89, 0x4c, 0x3f, 0x8b, 0x8b, 0xd4, 0xc4, 0xb2, 0xcf, 0x82, 0xca, 0x7d, 0xa8, 0xa3, 0xea, 0x6a, 0x23, 0x96, 0x55, 0xc3, 0x9c, 0x05, 0x0a, 0xb2, 0x20, 0xff, 0xff, 0xff, 0xff]),
                    precomputedUsed: (
                        hashAmounts: false,
                        hashPrevouts: false,
                        hashScriptPubkeys: false,
                        hashSequences: false,
                        hashOutputs: true
                    ),
                    sighash: Data([0xcc, 0xcb, 0x73, 0x9e, 0xca, 0x6c, 0x13, 0xa8, 0xa8, 0x9e, 0x6e, 0x5c, 0xd3, 0x17, 0xff, 0xe5, 0x56, 0x69, 0xbb, 0xda, 0x23, 0xf2, 0xfd, 0x37, 0xb0, 0xf1, 0x87, 0x55, 0xe0, 0x08, 0xed, 0xd2])
                ),
                expectedWitness: [
                    Data([0xbb, 0xc9, 0x58, 0x4a, 0x11, 0x07, 0x4e, 0x83, 0xbc, 0x8c, 0x67, 0x59, 0xec, 0x55, 0x40, 0x1f, 0x0a, 0xe7, 0xb0, 0x3e, 0xf2, 0x90, 0xc3, 0x13, 0x98, 0x14, 0xf5, 0x45, 0xb5, 0x8a, 0x9f, 0x81, 0x27, 0x25, 0x80, 0x00, 0x87, 0x4f, 0x44, 0xbc, 0x46, 0xdb, 0x76, 0x46, 0x32, 0x21, 0x07, 0xd4, 0xd8, 0x6a, 0xec, 0x8e, 0x73, 0xb8, 0x71, 0x9a, 0x61, 0xff, 0xf7, 0x61, 0xd7, 0x5b, 0x5d, 0xd9, 0x81])
                ]
            )
        ]

        for testCase in inputSpending {
            // Given
            let secretKey = testCase.given.internalSecretKey
            let merkleRoot = testCase.given.merkleRoot
            let sighashType = testCase.given.sighashType
            let inputIndex = testCase.given.txinIndex

            // Expected
            let expectedInternalPublicKey = testCase.intermediary.internalPubkey
            let expectedTweak = testCase.intermediary.tweak
            let expectedTweakedSecretKey = testCase.intermediary.tweakedSecretKey
            let expectedSigMsg = testCase.intermediary.sigMsg
            let expectedSighash = testCase.intermediary.sighash
            let expectedWitness = testCase.expectedWitness

            let internalPublicKey = getInternalKey(secretKey: secretKey)
            XCTAssertEqual(internalPublicKey, expectedInternalPublicKey)

            let tweak = computeTapTweakHash(internalKey: internalPublicKey, merkleRoot: merkleRoot)
            XCTAssertEqual(tweak, expectedTweak)

            let tweakedSecretKey = createTapTweak(secretKey: secretKey, merkleRoot: merkleRoot)
            XCTAssertEqual(tweakedSecretKey, expectedTweakedSecretKey)

            let sigMsg = tx.signatureMessageSchnorr(sighashType: sighashType, inputIndex: inputIndex, previousOutputs: utxosSpent, sighashCache: &cache)

            XCTAssertEqual(cache.shaAmountsUsed, testCase.intermediary.precomputedUsed.hashAmounts)
            XCTAssertEqual(cache.shaOutsUsed, testCase.intermediary.precomputedUsed.hashOutputs)
            XCTAssertEqual(cache.shaPrevoutsUsed, testCase.intermediary.precomputedUsed.hashPrevouts)
            XCTAssertEqual(cache.shaSequencesUsed, testCase.intermediary.precomputedUsed.hashSequences)
            XCTAssertEqual(cache.shaScriptPubKeysUsed, testCase.intermediary.precomputedUsed.hashScriptPubkeys)
            XCTAssertEqual(sigMsg, expectedSigMsg)

            let sighash = tx.signatureHashSchnorr(sighashType: sighashType, inputIndex: inputIndex, previousOutputs: utxosSpent, sighashCache: &cache)
            XCTAssertEqual(sighash, expectedSighash)

            let hashTypeSuffix: Data
            if let sighashType {
                hashTypeSuffix = sighashType.data
            } else {
                hashTypeSuffix = Data()
            }
            let sig = signSchnorr(msg: sighash, secretKey: secretKey, merkleRoot: merkleRoot, aux: Data(repeating: 0, count: 256)) + hashTypeSuffix
            XCTAssertEqual([sig], expectedWitness)
        }

        // TODO: Figure out how to sign input 2 (legacy) and 5 (segwit v0)
        // NOTE: Output script does not actually parse fully.
        // var expectedSignedTx =
        _ = BitcoinTransaction(.init([0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x7d, 0xe2, 0x0c, 0xbf, 0xf6, 0x86, 0xda, 0x83, 0xa5, 0x49, 0x81, 0xd2, 0xb9, 0xba, 0xb3, 0x58, 0x6f, 0x4c, 0xa7, 0xe4, 0x8f, 0x57, 0xf5, 0xb5, 0x59, 0x63, 0x11, 0x5f, 0x3b, 0x33, 0x4e, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xb7, 0xca, 0xb5, 0x7b, 0x13, 0x93, 0xac, 0xe2, 0xd0, 0x64, 0xf4, 0xd4, 0xa2, 0xcb, 0x8a, 0xf6, 0xde, 0xf6, 0x12, 0x73, 0xe1, 0x27, 0x51, 0x7d, 0x44, 0x75, 0x9b, 0x6d, 0xaf, 0xdd, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe1, 0xf5, 0x83, 0x38, 0x43, 0x33, 0x68, 0x92, 0x28, 0xc5, 0xd2, 0x8e, 0xac, 0x13, 0x36, 0x6b, 0xe0, 0x82, 0xdc, 0x57, 0x44, 0x17, 0x60, 0xd9, 0x57, 0x27, 0x54, 0x19, 0xa4, 0x18, 0x42, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0x8f, 0x3b, 0x8f, 0x8f, 0x05, 0x37, 0xc4, 0x20, 0x65, 0x4d, 0x22, 0x83, 0x67, 0x3a, 0x76, 0x1b, 0x7e, 0xe2, 0xea, 0x3c, 0x13, 0x07, 0x53, 0x10, 0x3e, 0x08, 0xce, 0x79, 0x20, 0x1c, 0xf3, 0x2a, 0x02, 0x20, 0x79, 0xe7, 0xab, 0x90, 0x4a, 0x19, 0x80, 0xef, 0x1c, 0x58, 0x90, 0xb6, 0x48, 0xc8, 0x78, 0x3f, 0x4d, 0x10, 0x10, 0x3d, 0xd6, 0x2f, 0x74, 0x0d, 0x13, 0xda, 0xa7, 0x9e, 0x29, 0x8d, 0x50, 0xc2, 0x01, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x68, 0x91, 0x80, 0xaa, 0x63, 0xb3, 0x0c, 0xb1, 0x62, 0xa7, 0x3c, 0x6d, 0x2a, 0x38, 0xb7, 0xee, 0xda, 0x2a, 0x83, 0xec, 0xe7, 0x43, 0x10, 0xfd, 0xa0, 0x84, 0x3a, 0xd6, 0x04, 0x85, 0x3b, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xaa, 0x52, 0x02, 0xbd, 0xf6, 0xd8, 0xcc, 0xd2, 0xee, 0x0f, 0x02, 0x02, 0xaf, 0xbb, 0xb7, 0x46, 0x1d, 0x92, 0x64, 0xa2, 0x5e, 0x5b, 0xfd, 0x3c, 0x5a, 0x52, 0xee, 0x12, 0x39, 0xe0, 0xba, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x95, 0x61, 0x49, 0xbd, 0xc6, 0x6f, 0xaa, 0x96, 0x8e, 0xb2, 0xbe, 0x2d, 0x2f, 0xaa, 0x29, 0x71, 0x8a, 0xcb, 0xfe, 0x39, 0x41, 0x21, 0x58, 0x93, 0xa2, 0xa3, 0x44, 0x6d, 0x32, 0xac, 0xd0, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x64, 0xb9, 0x77, 0x3b, 0x88, 0xc0, 0x9c, 0x32, 0xcb, 0x70, 0xa2, 0xa3, 0xe4, 0xda, 0x0c, 0xed, 0x63, 0xb7, 0xba, 0x3b, 0x22, 0xf8, 0x48, 0x53, 0x1b, 0xbb, 0x1d, 0x5d, 0x5f, 0x4c, 0x94, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x6b, 0x8e, 0x6c, 0x9d, 0xe6, 0x76, 0x19, 0xe6, 0xa3, 0x92, 0x4a, 0xe2, 0x56, 0x96, 0xbb, 0x7b, 0x69, 0x4b, 0xb6, 0x77, 0xa6, 0x32, 0xa7, 0x4e, 0xf7, 0xea, 0xdf, 0xd4, 0xea, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xa7, 0x78, 0xeb, 0x6a, 0x26, 0x3d, 0xc0, 0x90, 0x46, 0x4c, 0xd1, 0x25, 0xc4, 0x66, 0xb5, 0xa9, 0x96, 0x67, 0x72, 0x0b, 0x1c, 0x11, 0x04, 0x68, 0x83, 0x1d, 0x05, 0x8a, 0xa1, 0xb8, 0x2a, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0xca, 0x9a, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x06, 0xaf, 0xd4, 0x6b, 0xcd, 0xfd, 0x22, 0xef, 0x94, 0xac, 0x12, 0x2a, 0xa1, 0x1f, 0x24, 0x12, 0x44, 0xa3, 0x7e, 0xcc, 0x88, 0xac, 0x80, 0x78, 0x40, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x20, 0xac, 0x9a, 0x87, 0xf5, 0x59, 0x4b, 0xe2, 0x08, 0xf8, 0x53, 0x2d, 0xb3, 0x8c, 0xff, 0x67, 0x0c, 0x45, 0x0e, 0xd2, 0xfe, 0xa8, 0xfc, 0xde, 0xfc, 0xc9, 0xa6, 0x63, 0xf7, 0x8b, 0xab, 0x96, 0x2b, 0x01, 0x41, 0xed, 0x7c, 0x16, 0x47, 0xcb, 0x97, 0x37, 0x9e, 0x76, 0x89, 0x2b, 0xe0, 0xca, 0xcf, 0xf5, 0x7e, 0xc4, 0xa7, 0x10, 0x2a, 0xa2, 0x42, 0x96, 0xca, 0x39, 0xaf, 0x75, 0x41, 0x24, 0x6d, 0x8f, 0xf1, 0x4d, 0x38, 0x95, 0x8d, 0x4c, 0xc1, 0xe2, 0xe4, 0x78, 0xe4, 0xd4, 0xa7, 0x64, 0xbb, 0xfd, 0x83, 0x5b, 0x16, 0xd4, 0xe3, 0x14, 0xb7, 0x29, 0x37, 0xb2, 0x98, 0x33, 0x06, 0x0b, 0x87, 0x27, 0x6c, 0x03, 0x01, 0x41, 0x05, 0x2a, 0xed, 0xff, 0xc5, 0x54, 0xb4, 0x1f, 0x52, 0xb5, 0x21, 0x07, 0x17, 0x93, 0xa6, 0xb8, 0x8d, 0x6d, 0xbc, 0xa9, 0xdb, 0xa9, 0x4c, 0xf3, 0x4c, 0x83, 0x69, 0x6d, 0xe0, 0xc1, 0xec, 0x35, 0xca, 0x9c, 0x5e, 0xd4, 0xab, 0x28, 0x05, 0x9b, 0xd6, 0x06, 0xa4, 0xf3, 0xa6, 0x57, 0xee, 0xc0, 0xbb, 0x96, 0x66, 0x1d, 0x42, 0x92, 0x1b, 0x5f, 0x50, 0xa9, 0x5a, 0xd3, 0x36, 0x75, 0xb5, 0x4f, 0x83, 0x00, 0x01, 0x41, 0xff, 0x45, 0xf7, 0x42, 0xa8, 0x76, 0x13, 0x99, 0x46, 0xa1, 0x49, 0xab, 0x4d, 0x91, 0x85, 0x57, 0x4b, 0x98, 0xdc, 0x91, 0x9d, 0x2e, 0xb6, 0x75, 0x4f, 0x8a, 0xba, 0xa5, 0x9d, 0x18, 0xb0, 0x25, 0x63, 0x7a, 0x3a, 0xa0, 0x43, 0xb9, 0x18, 0x17, 0x73, 0x95, 0x54, 0xf4, 0xed, 0x20, 0x26, 0xcf, 0x80, 0x22, 0xdb, 0xd8, 0x3e, 0x35, 0x1c, 0xe1, 0xfa, 0xbc, 0x27, 0x28, 0x41, 0xd2, 0x51, 0x0a, 0x01, 0x01, 0x40, 0xb4, 0x01, 0x0d, 0xd4, 0x8a, 0x61, 0x7d, 0xb0, 0x99, 0x26, 0xf7, 0x29, 0xe7, 0x9c, 0x33, 0xae, 0x0b, 0x4e, 0x94, 0xb7, 0x9f, 0x04, 0xa1, 0xae, 0x93, 0xed, 0xe6, 0x31, 0x5e, 0xb3, 0x66, 0x9d, 0xe1, 0x85, 0xa1, 0x7d, 0x2b, 0x0a, 0xc9, 0xee, 0x09, 0xfd, 0x4c, 0x64, 0xb6, 0x78, 0xa0, 0xb6, 0x1a, 0x0a, 0x86, 0xfa, 0x88, 0x8a, 0x27, 0x3c, 0x85, 0x11, 0xbe, 0x83, 0xbf, 0xd6, 0x81, 0x0f, 0x02, 0x47, 0x30, 0x44, 0x02, 0x20, 0x2b, 0x79, 0x5e, 0x4d, 0xe7, 0x26, 0x46, 0xd7, 0x6e, 0xab, 0x3f, 0x0a, 0xb2, 0x7d, 0xfa, 0x30, 0xb8, 0x10, 0xe8, 0x56, 0xff, 0x3a, 0x46, 0xc9, 0xa7, 0x02, 0xdf, 0x53, 0xbb, 0x0d, 0x8c, 0xc3, 0x02, 0x20, 0x3c, 0xcc, 0x4d, 0x82, 0x2e, 0xda, 0xb5, 0xf3, 0x5c, 0xad, 0xdb, 0x10, 0xaf, 0x1b, 0xe9, 0x35, 0x83, 0x52, 0x6c, 0xcf, 0xba, 0xde, 0x4b, 0x4e, 0xad, 0x35, 0x07, 0x81, 0xe2, 0xf8, 0xad, 0xcd, 0x01, 0x21, 0x02, 0xf9, 0x30, 0x8a, 0x01, 0x92, 0x58, 0xc3, 0x10, 0x49, 0x34, 0x4f, 0x85, 0xf8, 0x9d, 0x52, 0x29, 0xb5, 0x31, 0xc8, 0x45, 0x83, 0x6f, 0x99, 0xb0, 0x86, 0x01, 0xf1, 0x13, 0xbc, 0xe0, 0x36, 0xf9, 0x01, 0x41, 0xa3, 0x78, 0x59, 0x19, 0xa2, 0xce, 0x3c, 0x4c, 0xe2, 0x6f, 0x29, 0x8c, 0x3d, 0x51, 0x61, 0x9b, 0xc4, 0x74, 0xae, 0x24, 0x01, 0x4b, 0xcd, 0xd3, 0x13, 0x28, 0xcd, 0x8c, 0xfb, 0xab, 0x2e, 0xff, 0x33, 0x95, 0xfa, 0x0a, 0x16, 0xfe, 0x5f, 0x48, 0x6d, 0x12, 0xf2, 0x2a, 0x9c, 0xed, 0xde, 0xd5, 0xae, 0x74, 0xfe, 0xb4, 0xbb, 0xe5, 0x35, 0x13, 0x46, 0x50, 0x8c, 0x54, 0x05, 0xbc, 0xfe, 0xe0, 0x02, 0x01, 0x41, 0xea, 0x0c, 0x6b, 0xa9, 0x07, 0x63, 0xc2, 0xd3, 0xa2, 0x96, 0xad, 0x82, 0xba, 0x45, 0x88, 0x1a, 0xbb, 0x4f, 0x42, 0x6b, 0x3f, 0x87, 0xaf, 0x16, 0x2d, 0xd2, 0x4d, 0x51, 0x09, 0xed, 0xc1, 0xcd, 0xd1, 0x19, 0x15, 0x09, 0x5b, 0xa4, 0x7c, 0x3a, 0x99, 0x63, 0xdc, 0x1e, 0x6c, 0x43, 0x29, 0x39, 0x87, 0x2b, 0xc4, 0x92, 0x12, 0xfe, 0x34, 0xc6, 0x32, 0xcd, 0x3a, 0xb9, 0xfe, 0xd4, 0x29, 0xc4, 0x82, 0x01, 0x41, 0xbb, 0xc9, 0x58, 0x4a, 0x11, 0x07, 0x4e, 0x83, 0xbc, 0x8c, 0x67, 0x59, 0xec, 0x55, 0x40, 0x1f, 0x0a, 0xe7, 0xb0, 0x3e, 0xf2, 0x90, 0xc3, 0x13, 0x98, 0x14, 0xf5, 0x45, 0xb5, 0x8a, 0x9f, 0x81, 0x27, 0x25, 0x80, 0x00, 0x87, 0x4f, 0x44, 0xbc, 0x46, 0xdb, 0x76, 0x46, 0x32, 0x21, 0x07, 0xd4, 0xd8, 0x6a, 0xec, 0x8e, 0x73, 0xb8, 0x71, 0x9a, 0x61, 0xff, 0xf7, 0x61, 0xd7, 0x5b, 0x5d, 0xd9, 0x81, 0x00, 0x65, 0xcd, 0x1d]))
    }
}
